{"version":3,"sources":["../src/ledgers.ts"],"names":[],"mappings":"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","file":"ledgers.js","sourcesContent":["import { buildConnection } from './connection';\nimport { sanitiseDid } from './did';\nimport { ApiPromise } from '@polkadot/api';\nimport { submitTransaction } from './common/helper';\nimport { KeyringPair } from '@polkadot/keyring/types';\nimport { encodeData, CURRENCY_CODE_BYTES } from './utils';\nimport { balances, did, vc } from '.';\nimport { decodeVCProperty } from './vc';\n\n// Extrinsic functions\n\n/**\n * Issue a new currency\n * @param {HexString} vcId\n * @param {Number} totalSupply HIGHEST FORM WITHOUT DECIMALS\n * @param {KeyringPair} senderAccountKeyPair\n * @param {ApiPromise} api Ledger chain connection\n * @param {ApiPromise} relayApi Relay chain connection\n * @returns {Object} Transaction Object\n */\n async function issueToken(\n    vcId,\n    totalSupply,\n    senderAccountKeyPair: KeyringPair,\n    api: ApiPromise,\n    relayApi: ApiPromise,\n ) {\n   const provider = api || (await buildConnection('local'));\n   // get VC from VC ID\n   let vc_details: any = await vc.getVCs(vcId, provider);\n   if (!vc_details) {\n      throw new Error('VC.VCNotRegistered');\n   }\n   // check if vc property has reservable balance\n   let decoded_vc = decodeVCProperty(vc_details.vcProperty, \"TokenVC\");\n   if (decoded_vc.reservable_balance == undefined || decoded_vc.reservable_balance == null) {\n      throw new Error('VC.VCNotReservable');\n   }\n   // Check for balance in relay\n   const relayConn = relayApi || await buildConnection('local');\n   let balance = await balances.getBalance(vc_details.owner, relayConn);\n   if (decoded_vc.reservable_balance > ( balance * Math.pow(10, 6)) ) {\n      throw new Error('VC.InsufficientBalance');\n   }\n\n   const tx = provider.tx.tokens.issueToken(vcId, totalSupply * Math.pow(10, decoded_vc.decimal));\n   let nonce = await provider.rpc.system.accountNextIndex(senderAccountKeyPair.address);\n   let signedTx = await tx.signAsync(senderAccountKeyPair, { nonce });\n   return submitTransaction(signedTx, provider);\n}\n\n/**\n * Mint token to given currency\n * @param {HexString} vcId\n * @param {KeyringPair} senderAccountKeyPair\n * @param {ApiPromise} api\n * @returns {Object} Transaction Object\n */\n async function mintToken(\n   vcId,\n   senderAccountKeyPair: KeyringPair,\n   api: ApiPromise,\n ) {\n   const provider = api || (await buildConnection('local'));\n   const tx = provider.tx.tokens.mintToken(vcId);\n   let nonce = await provider.rpc.system.accountNextIndex(senderAccountKeyPair.address);\n   let signedTx = await tx.signAsync(senderAccountKeyPair, { nonce });\n   return submitTransaction(signedTx, provider);\n}\n\n/**\n * Remove Token from circulation\n * @param {String} currencyCode\n * @param {HexString} vcId\n * @param {String} fromDid\n * @param {KeyringPair} senderAccountKeyPair\n * @param {ApiPromise} api\n * @returns {Object} Transaction Object\n */\n async function removeToken(\n  currencyCode,\n  vcId,\n  fromDid,\n  senderAccountKeyPair: KeyringPair,\n  api: ApiPromise,\n) {\n   const provider = api || (await buildConnection('local'));\n   let from_did_hex = sanitiseDid(fromDid);\n   let from_did_check = await did.resolveDIDToAccount(from_did_hex, provider);\n   if (!from_did_check) {\n        throw new Error('DID.DIDNotRegistered');\n   }\n   const tx = provider.tx.sudo.sudo(\n      provider.tx.tokens.removeToken(sanitiseCCode(currencyCode), vcId, from_did_hex)\n   );\n   let nonce = await provider.rpc.system.accountNextIndex(senderAccountKeyPair.address);\n   let signedTx = await tx.signAsync(senderAccountKeyPair, { nonce });\n   return submitTransaction(signedTx, provider);\n}\n\n/**\n * Set Balance of a DID of a given currency\n * @param {String} dest\n * @param {String} currencyCode\n * @param {Number} amount\n * @param {KeyringPair} senderAccountKeyPair\n * @param {ApiPromise} api\n * @returns {Object} Transaction Object\n */\n  async function setBalance(\n   dest,\n   currencyCode,\n   amount,\n   senderAccountKeyPair: KeyringPair,\n   api: ApiPromise,\n  ) {\n   const provider = api || (await buildConnection('local'));\n   let dest_did_hex = sanitiseDid(dest);\n   let dest_check = await did.resolveDIDToAccount(dest_did_hex, provider);\n   if (!dest_check) {\n      throw new Error('DID.DIDNotRegistered');\n   }\n   const tx = provider.tx.tokens.setBalance(dest_did_hex, sanitiseCCode(currencyCode), amount);\n   let nonce = await provider.rpc.system.accountNextIndex(senderAccountKeyPair.address);\n   let signedTx = await tx.signAsync(senderAccountKeyPair, { nonce });\n   return submitTransaction(signedTx, provider);\n}\n\n/**\n * Slash token from given currency\n * @param {HexString} vcId\n * @param {KeyringPair} senderAccountKeyPair\n * @param {ApiPromise} api\n * @returns {Object} Transaction Object\n */\nasync function slashToken(\n  vcId,\n  senderAccountKeyPair: KeyringPair,\n  api: ApiPromise,\n) {\n   const provider = api || (await buildConnection('local'));\n   const tx = provider.tx.tokens.slashToken(vcId);\n   let nonce = await provider.rpc.system.accountNextIndex(senderAccountKeyPair.address);\n   let signedTx = await tx.signAsync(senderAccountKeyPair, { nonce });\n   return submitTransaction(signedTx, provider);\n}\n\n/**\n * Transfer token balance to another account\n * @param {String} destDid\n * @param {String} currencyCode\n * @param {Number} amount\n * @param {KeyringPair} senderAccountKeyPair\n * @param {ApiPromise} api\n * @returns {Object} Transaction Object\n */\n async function transfer(\n   destDid,\n   currencyCode,\n   amount,\n   senderAccountKeyPair: KeyringPair,\n   api: ApiPromise,\n  ) {\n   const provider = api || (await buildConnection('local'));\n   let dest_did_hex = sanitiseDid(destDid);\n   let dest_did_check = await did.resolveDIDToAccount(dest_did_hex, provider);\n   if (!dest_did_check) {\n      throw new Error('DID.RecipentDIDNotRegistered');\n   }\n   const tx = provider.tx.tokens.transfer(dest_did_hex, sanitiseCCode(currencyCode), amount);\n   let nonce = await provider.rpc.system.accountNextIndex(senderAccountKeyPair.address);\n   let signedTx = await tx.signAsync(senderAccountKeyPair, { nonce });\n   return submitTransaction(signedTx, provider);\n}\n\n/**\n * Transfer all token balance to another account\n * @param {String} destDid\n * @param {String} currencyCode\n * @param {KeyringPair} senderAccountKeyPair\n * @param {ApiPromise} api\n * @returns {Object} Transaction Object\n */\n async function transferAll(\n   destDid,\n   currencyCode,\n   senderAccountKeyPair: KeyringPair,\n   api: ApiPromise,\n  ) {\n   const provider = api || (await buildConnection('local'));\n   let dest_did_hex = sanitiseDid(destDid);\n   let dest_did_check = await did.resolveDIDToAccount(dest_did_hex, provider);\n   if (!dest_did_check) {\n      throw new Error('DID.RecipentDIDNotRegistered');\n   }\n   const tx = provider.tx.tokens.transferAll(dest_did_hex, sanitiseCCode(currencyCode));\n   let nonce = await provider.rpc.system.accountNextIndex(senderAccountKeyPair.address);\n   let signedTx = await tx.signAsync(senderAccountKeyPair, { nonce });\n   return submitTransaction(signedTx, provider);\n}\n\n/**\n * Transfer token balance to another account\n * @param {String} destDid\n * @param {String} currencyCode\n * @param {Number} amount\n * @param {String} memo\n * @param {KeyringPair} senderAccountKeyPair\n * @param {ApiPromise} api\n * @returns {Object} Transaction Object\n */\n async function transferWithMemo(\n   destDid,\n   currencyCode,\n   amount,\n   memo,\n   senderAccountKeyPair: KeyringPair,\n   api: ApiPromise,\n  ) {\n   const provider = api || (await buildConnection('local'));\n   let dest_did_hex = sanitiseDid(destDid);\n   let dest_did_check = await did.resolveDIDToAccount(dest_did_hex, provider);\n   if (!dest_did_check) {\n      throw new Error('DID.RecipentDIDNotRegistered');\n   }\n   const tx = provider.tx.tokens.transferWithMemo(dest_did_hex, sanitiseCCode(currencyCode), amount, memo);\n   let nonce = await provider.rpc.system.accountNextIndex(senderAccountKeyPair.address);\n   let signedTx = await tx.signAsync(senderAccountKeyPair, { nonce });\n   return submitTransaction(signedTx, provider);\n}\n\n/**\n * Transfer tokens to a DID\n * @param {HexString} vcId\n * @param {string} toDid\n * @param {KeyringPair} senderAccountKeyPair\n * @param {ApiPromise} api\n * @returns {Object} Transaction Object\n */\n async function transferToken(\n   vcId,\n   toDid,\n   senderAccountKeyPair: KeyringPair,\n   api: ApiPromise,\n   ) {\n\n   let to_did_hex = sanitiseDid(toDid);\n   let to_did_check = await did.resolveDIDToAccount(to_did_hex, api);\n   if (!to_did_check) {\n       throw new Error('DID.RecipentDIDNotRegistered');\n   }\n   const provider = api || (await buildConnection('local'));\n   const tx = provider.tx.tokens.transferToken(vcId, to_did_hex);\n   let nonce = await provider.rpc.system.accountNextIndex(senderAccountKeyPair.address);\n   let signedTx = await tx.signAsync(senderAccountKeyPair, { nonce });\n   return submitTransaction(signedTx, provider);\n}\n\n/**\n * Sanitise Token Name\n * @param {String} token\n * @returns {String} Sanitised Token Name\n */\n const sanitiseCCode = (token) => {\n   if(!token) return null;\n   if (token.startsWith('0x'))\n      return token.padEnd(CURRENCY_CODE_BYTES, '\\0');\n   return encodeData(token.padEnd(CURRENCY_CODE_BYTES, '\\0'), 'currency_code');\n}\n\n// Storage Query Functions\n\n/** Get account balance (Highest Form) based on the did supplied.\n * @param {string} did valid registered did\n * @param {string} currencyCode\n * @param {ApiPromise} api (optional)\n * @returns {number}\n */\n const getBalance = async (did: string, currencyCode: string, api: ApiPromise): Promise<number> => {\n   // Resolve the did to get account ID\n   return new Promise(async (resolve, reject) => {\n      try {\n         const provider = api || await buildConnection('local');\n         const tokenInfo = await tokenData(currencyCode, provider);\n         let decimals = tokenInfo?.['decimal'];\n         // console.log('Decimals', decimals);\n         const accountInfo = await provider.query.tokens.accounts(sanitiseCCode(currencyCode), sanitiseDid(did));\n         const data = accountInfo.toJSON()?.['data'];\n         resolve(data.free / Math.pow(10, decimals));\n      } catch (err) {\n         // console.log(err);\n         return reject(new Error(\"Cannot get balance\"));\n      }\n   });\n}\n\n/** Get account balance (Lowest Form) based on the did supplied.\n * A valid registered did is required\n * @param {string} currencyCode\n * @param {ApiPromise} api (optional)\n * @returns {Object} Balance Object { free: number, reserved: number, frozen: number}\n */\n const getDetailedBalance = async (did: string, currencyCode: string, api: ApiPromise) => {\n   // Resolve the did to get account ID\n   return new Promise(async (resolve, reject) => {\n      try {\n         const provider = api || await buildConnection('local');\n         const accountInfo = await provider.query.tokens.accounts(sanitiseCCode(currencyCode), sanitiseDid(did));\n         resolve( accountInfo.toJSON()?.['data'] );\n      } catch (err) {\n         // console.log(err);\n         return reject(new Error(\"Cannot get balance\"));\n      }\n   });\n}\n\n/** Listen to balance (Highest Form) changes for a DID and execute the callback\n * @param {string} did\n * @param {string} currencyCode\n * @param {Function} callback\n * @param {ApiPromise} api\n */\n const subscribeToBalanceChanges = async (did: string, currencyCode: string, callback: (balance: number) => void, api: ApiPromise) => {\n   try {\n     const provider = api || await buildConnection('local');\n     const tokenInfo = await tokenData(currencyCode, provider);\n     let decimals = tokenInfo?.['decimal'];\n     return await provider.query.tokens.accounts(sanitiseCCode(currencyCode), sanitiseDid(did), ({ data: { free: currentBalance } }) => {\n       callback(currentBalance.toNumber() / Math.pow(10, decimals));\n     });\n   } catch (err) {\n     return null;\n   }\n};\n\n \n/**\n  * Subsribe to detailed balance changes for a DID and execute the callback.\n  * @param {string} did\n  * @param {string} currencyCode\n  * @param {Function} callback\n  * @param {ApiPromise} api\n  */\n const subscribeToDetailedBalanceChanges = async (did: string, currencyCode: string, callback: (data: Object) => void, api: ApiPromise) => {\n   try {\n     const provider = api || await buildConnection('local');\n     return await provider.query.tokens.accounts(sanitiseCCode(currencyCode), sanitiseDid(did), ({ data }) => {\n       callback(data.toJSON());\n     });\n   } catch (err) {\n     return null;\n   }\n};\n\n/**\n * get Token List\n * @param {ApiPromise} api\n * @returns {Object} Token List\n */\nasync function getTokenList(api: ApiPromise) {\n   const provider = api || (await buildConnection('local'));\n   const data: any = await provider.query.tokens.tokenData.entries();\n   if(!data) return null;\n   return data.map(([{ args: [currencyCode] }, value]) => ({\n      name: value.toHuman().tokenName,\n      currencyCode: value.toHuman().currencyCode,\n      decimal: value.toHuman().decimal,\n      blockNumber: value.toHuman().blockNumber,\n   })\n  );\n}\n\n/**\n * Get any liquidity locks of a token type under an account\n * @param {String} currencyCode\n * @param {String} did\n * @param {ApiPromise} api\n */\n async function getLocks(\n   currencyCode: String,\n   did: String,\n   api: ApiPromise,\n  ) {\n   const provider = api || (await buildConnection('local'));\n   return (await provider.query.tokens.locks(sanitiseCCode(currencyCode), sanitiseDid(did))).toJSON();\n}\n\n/**\n * Storage map between currency code and block number \n * @param {ApiPromise} api\n * @param {String} currencyCode (Optional)\n */\n async function removedTokens(\n   api: ApiPromise,\n   currencyCode?: String,\n  ) {\n   const provider = api || (await buildConnection('local'));\n   return (await provider.query.tokens.removedTokens(sanitiseCCode(currencyCode))).toJSON();\n}\n\n/**\n * Token currency counter\n * @param {ApiPromise} api\n */\n async function tokenCurrencyCounter(\n   api: ApiPromise,\n  ) {\n   const provider = api || (await buildConnection('local'));\n   return (await provider.query.tokens.tokenCurrencyCounter()).toString();\n}\n\n/**\n * Map to store a friendly token name for token\n * @param {string | null} currencyCode\n * @param {ApiPromise} api\n */\n async function tokenData(\n   currencyCode: string | null,\n   api: ApiPromise,\n  ) {\n   const provider = api || (await buildConnection('local'));\n   return (await provider.query.tokens.tokenData(sanitiseCCode(currencyCode))).toJSON();\n}\n\n/**\n * Get Token Information\n * @param {String} currencyCode\n * @param {ApiPromise} api\n * @returns {Number} Currency Id\n */\nasync function tokenInfo(\n   currencyCode: String,\n   api: ApiPromise,\n  ) {\n   const provider = api || (await buildConnection('local'));\n   return (await provider.query.tokens.tokenInfo(sanitiseCCode(currencyCode))).toString();\n}\n\n/**\n * Reverse lookup Token Information\n * @param {Number} currencyId\n * @param {ApiPromise} api\n * @returns {HexString} Currency Code Hex\n */\n async function tokenInfoRLookup(\n   currencyId: Number,\n   api: ApiPromise,\n  ) {\n   const provider = api || (await buildConnection('local'));\n   return (await provider.query.tokens.tokenInfoRLookup(currencyId)).toHex();\n}\n\n/**\n * Lookup Token Issuer\n * @param {String} currencyCode\n * @param {ApiPromise} api\n * @returns {HexString} Token Owner DID Hex\n */\n async function tokenIssuer(\n   currencyCode: String,\n   api: ApiPromise,\n  ) {\n   const provider = api || (await buildConnection('local'));\n   return (await provider.query.tokens.tokenIssuer(sanitiseCCode(currencyCode))).toHex();\n}\n\n/**\n * Get Total Token Issuance\n * @param {String} currencyCode\n * @param {ApiPromise} api\n * @returns {Number} Token Issuance\n */\nasync function totalIssuance(\n   currencyCode: String,\n   api: ApiPromise,\n  ) {\n   const provider = api || (await buildConnection('local'));\n   return (await provider.query.tokens.totalIssuance(sanitiseCCode(currencyCode))).toString();\n}\n\nexport {\n   issueToken,\n   mintToken,\n   removeToken,\n   getBalance,\n   setBalance,\n   getDetailedBalance,\n   subscribeToBalanceChanges,\n   subscribeToDetailedBalanceChanges,\n   slashToken,\n   transfer,\n   transferAll,\n   transferWithMemo,\n   transferToken,\n   sanitiseCCode,\n   getLocks,\n   removedTokens,\n   tokenCurrencyCounter,\n   getTokenList,\n   tokenData,\n   tokenInfo,\n   tokenInfoRLookup,\n   tokenIssuer,\n   totalIssuance\n};"]}