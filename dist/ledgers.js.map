{"version":3,"sources":["../src/ledgers.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,+BAA4C;AAC5C,6CAA+C;AAC/C,+BAAoC;AAEpC,4CAAoD;AAEpD,mCAA0D;AAE1D,sBAAsB;AAEtB;;;;;;;GAOG;AACF,SAAe,UAAU,CACtB,IAAI,EACJ,WAAW,EACX,oBAAiC,EACjC,GAAe;;QAEhB,MAAM,QAAQ,GAAG,GAAG,IAAI,CAAC,MAAM,IAAA,4BAAe,EAAC,OAAO,CAAC,CAAC,CAAC;QACzD,MAAM,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;QAC5D,IAAI,KAAK,GAAG,MAAM,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,gBAAgB,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;QACrF,IAAI,QAAQ,GAAG,MAAM,EAAE,CAAC,SAAS,CAAC,oBAAoB,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;QACnE,OAAO,IAAA,0BAAiB,EAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAChD,CAAC;CAAA;AAyVE,gCAAU;AAvVb;;;;;;GAMG;AACF,SAAe,SAAS,CACtB,IAAI,EACJ,oBAAiC,EACjC,GAAe;;QAEf,MAAM,QAAQ,GAAG,GAAG,IAAI,CAAC,MAAM,IAAA,4BAAe,EAAC,OAAO,CAAC,CAAC,CAAC;QACzD,MAAM,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAC9C,IAAI,KAAK,GAAG,MAAM,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,gBAAgB,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;QACrF,IAAI,QAAQ,GAAG,MAAM,EAAE,CAAC,SAAS,CAAC,oBAAoB,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;QACnE,OAAO,IAAA,0BAAiB,EAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAChD,CAAC;CAAA;AAuUE,8BAAS;AArUZ;;;;;;;;GAQG;AACF,SAAe,WAAW,CACzB,YAAY,EACZ,IAAI,EACJ,OAAO,EACP,oBAAiC,EACjC,GAAe;;QAEd,MAAM,QAAQ,GAAG,GAAG,IAAI,CAAC,MAAM,IAAA,4BAAe,EAAC,OAAO,CAAC,CAAC,CAAC;QACzD,IAAI,YAAY,GAAG,IAAA,iBAAW,EAAC,OAAO,CAAC,CAAC;QACxC,IAAI,cAAc,GAAG,MAAM,IAAA,yBAAmB,EAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;QACvE,IAAI,CAAC,cAAc,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;SAC5C;QACD,MAAM,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,WAAW,CAAC,YAAY,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC;QAC5E,IAAI,KAAK,GAAG,MAAM,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,gBAAgB,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;QACrF,IAAI,QAAQ,GAAG,MAAM,EAAE,CAAC,SAAS,CAAC,oBAAoB,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;QACnE,OAAO,IAAA,0BAAiB,EAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAChD,CAAC;CAAA;AA4SE,kCAAW;AA1Sd;;;;;;;;GAQG;AACD,SAAe,UAAU,CACxB,IAAI,EACJ,YAAY,EACZ,MAAM,EACN,oBAAiC,EACjC,GAAe;;QAEf,MAAM,QAAQ,GAAG,GAAG,IAAI,CAAC,MAAM,IAAA,4BAAe,EAAC,OAAO,CAAC,CAAC,CAAC;QACzD,IAAI,QAAQ,GAAG,IAAA,iBAAW,EAAC,IAAI,CAAC,CAAC;QACjC,IAAI,UAAU,GAAG,MAAM,IAAA,yBAAmB,EAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAC/D,IAAI,CAAC,UAAU,EAAE;YACd,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;SAC1C;QACD,MAAM,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,EAAE,aAAa,CAAC,YAAY,CAAC,EAAE,MAAM,CAAC,CAAC;QACxF,IAAI,KAAK,GAAG,MAAM,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,gBAAgB,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;QACrF,IAAI,QAAQ,GAAG,MAAM,EAAE,CAAC,SAAS,CAAC,oBAAoB,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;QACnE,OAAO,IAAA,0BAAiB,EAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAChD,CAAC;CAAA;AAiRE,gCAAU;AA/Qb;;;;;;GAMG;AACH,SAAe,UAAU,CACvB,IAAI,EACJ,oBAAiC,EACjC,GAAe;;QAEd,MAAM,QAAQ,GAAG,GAAG,IAAI,CAAC,MAAM,IAAA,4BAAe,EAAC,OAAO,CAAC,CAAC,CAAC;QACzD,MAAM,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC/C,IAAI,KAAK,GAAG,MAAM,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,gBAAgB,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;QACrF,IAAI,QAAQ,GAAG,MAAM,EAAE,CAAC,SAAS,CAAC,oBAAoB,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;QACnE,OAAO,IAAA,0BAAiB,EAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAChD,CAAC;CAAA;AA+PE,gCAAU;AA7Pb;;;;;;;;GAQG;AACF,SAAe,QAAQ,CACrB,OAAO,EACP,YAAY,EACZ,MAAM,EACN,oBAAiC,EACjC,GAAe;;QAEf,MAAM,QAAQ,GAAG,GAAG,IAAI,CAAC,MAAM,IAAA,4BAAe,EAAC,OAAO,CAAC,CAAC,CAAC;QACzD,IAAI,YAAY,GAAG,IAAA,iBAAW,EAAC,OAAO,CAAC,CAAC;QACxC,IAAI,cAAc,GAAG,MAAM,IAAA,yBAAmB,EAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;QACvE,IAAI,CAAC,cAAc,EAAE;YAClB,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;SAClD;QACD,MAAM,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,EAAE,aAAa,CAAC,YAAY,CAAC,EAAE,MAAM,CAAC,CAAC;QAC1F,IAAI,KAAK,GAAG,MAAM,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,gBAAgB,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;QACrF,IAAI,QAAQ,GAAG,MAAM,EAAE,CAAC,SAAS,CAAC,oBAAoB,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;QACnE,OAAO,IAAA,0BAAiB,EAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAChD,CAAC;CAAA;AAoOE,4BAAQ;AAlOX;;;;;;;GAOG;AACF,SAAe,WAAW,CACxB,OAAO,EACP,YAAY,EACZ,oBAAiC,EACjC,GAAe;;QAEf,MAAM,QAAQ,GAAG,GAAG,IAAI,CAAC,MAAM,IAAA,4BAAe,EAAC,OAAO,CAAC,CAAC,CAAC;QACzD,IAAI,YAAY,GAAG,IAAA,iBAAW,EAAC,OAAO,CAAC,CAAC;QACxC,IAAI,cAAc,GAAG,MAAM,IAAA,yBAAmB,EAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;QACvE,IAAI,CAAC,cAAc,EAAE;YAClB,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;SAClD;QACD,MAAM,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,WAAW,CAAC,YAAY,EAAE,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC;QACrF,IAAI,KAAK,GAAG,MAAM,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,gBAAgB,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;QACrF,IAAI,QAAQ,GAAG,MAAM,EAAE,CAAC,SAAS,CAAC,oBAAoB,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;QACnE,OAAO,IAAA,0BAAiB,EAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAChD,CAAC;CAAA;AA2ME,kCAAW;AAzMd;;;;;;;;;GASG;AACF,SAAe,qBAAqB,CAClC,OAAO,EACP,YAAY,EACZ,MAAM,EACN,IAAI,EACJ,oBAAiC,EACjC,GAAe;;QAEf,MAAM,QAAQ,GAAG,GAAG,IAAI,CAAC,MAAM,IAAA,4BAAe,EAAC,OAAO,CAAC,CAAC,CAAC;QACzD,IAAI,YAAY,GAAG,IAAA,iBAAW,EAAC,OAAO,CAAC,CAAC;QACxC,IAAI,cAAc,GAAG,MAAM,IAAA,yBAAmB,EAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;QACvE,IAAI,CAAC,cAAc,EAAE;YAClB,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;SAClD;QACD,MAAM,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,EAAE,aAAa,CAAC,YAAY,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;QAChG,IAAI,KAAK,GAAG,MAAM,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,gBAAgB,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;QACrF,IAAI,QAAQ,GAAG,MAAM,EAAE,CAAC,SAAS,CAAC,oBAAoB,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;QACnE,OAAO,IAAA,0BAAiB,EAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAChD,CAAC;CAAA;AA8KE,sDAAqB;AA5KxB;;;;;;;GAOG;AACF,SAAe,aAAa,CAC1B,IAAI,EACJ,KAAK,EACL,oBAAiC,EACjC,GAAe;;QAGf,IAAI,UAAU,GAAG,IAAA,iBAAW,EAAC,KAAK,CAAC,CAAC;QACpC,IAAI,YAAY,GAAG,MAAM,IAAA,yBAAmB,EAAC,UAAU,EAAE,GAAG,CAAC,CAAC;QAC9D,IAAI,CAAC,YAAY,EAAE;YACf,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;SACnD;QACD,MAAM,QAAQ,GAAG,GAAG,IAAI,CAAC,MAAM,IAAA,4BAAe,EAAC,OAAO,CAAC,CAAC,CAAC;QACzD,MAAM,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;QAC9D,IAAI,KAAK,GAAG,MAAM,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,gBAAgB,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;QACrF,IAAI,QAAQ,GAAG,MAAM,EAAE,CAAC,SAAS,CAAC,oBAAoB,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;QACnE,OAAO,IAAA,0BAAiB,EAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAChD,CAAC;CAAA;AAoJE,sCAAa;AAlJhB;;;;GAIG;AACF,MAAM,aAAa,GAAG,CAAC,KAAK,EAAE,EAAE;IAC9B,IAAG,CAAC,KAAK;QAAE,OAAO,IAAI,CAAC;IACvB,IAAI,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC;QACvB,OAAO,KAAK,CAAC,MAAM,CAAC,2BAAmB,EAAE,IAAI,CAAC,CAAC;IAClD,OAAO,IAAA,kBAAU,EAAC,KAAK,CAAC,MAAM,CAAC,2BAAmB,EAAE,IAAI,CAAC,EAAE,eAAe,CAAC,CAAC;AAC/E,CAAC,CAAA;AAyIE,sCAAa;AAvIhB,0BAA0B;AAE1B;;;;;GAKG;AACF,SAAe,QAAQ,CACrB,YAAoB,EACpB,GAAW,EACX,GAAe;;QAEf,MAAM,QAAQ,GAAG,GAAG,IAAI,CAAC,MAAM,IAAA,4BAAe,EAAC,OAAO,CAAC,CAAC,CAAC;QACzD,OAAO,CAAC,MAAM,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,YAAY,CAAC,EAAE,IAAA,iBAAW,EAAC,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;IACzG,CAAC;CAAA;AAyHE,4BAAQ;AAvHX;;;;;GAKG;AACF,SAAe,KAAK,CAClB,YAAoB,EACpB,GAAW,EACX,GAAe;;QAEf,MAAM,QAAQ,GAAG,GAAG,IAAI,CAAC,MAAM,IAAA,4BAAe,EAAC,OAAO,CAAC,CAAC,CAAC;QACzD,OAAO,CAAC,MAAM,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,YAAY,CAAC,EAAE,IAAA,iBAAW,EAAC,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;IACtG,CAAC;CAAA;AA2GE,sBAAK;AAzGR;;;;GAIG;AACF,SAAe,aAAa,CAC1B,GAAe,EACf,YAAqB;;QAErB,MAAM,QAAQ,GAAG,GAAG,IAAI,CAAC,MAAM,IAAA,4BAAe,EAAC,OAAO,CAAC,CAAC,CAAC;QACzD,OAAO,CAAC,MAAM,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,aAAa,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;IAC5F,CAAC;CAAA;AA+FE,sCAAa;AA7FhB;;;GAGG;AACF,SAAe,oBAAoB,CACjC,GAAe;;QAEf,MAAM,QAAQ,GAAG,GAAG,IAAI,CAAC,MAAM,IAAA,4BAAe,EAAC,OAAO,CAAC,CAAC,CAAC;QACzD,OAAO,CAAC,MAAM,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,oBAAoB,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC;IAC1E,CAAC;CAAA;AAqFE,oDAAoB;AAnFvB;;;;GAIG;AACF,SAAe,SAAS,CACtB,YAAoB,EACpB,GAAe;;QAEf,MAAM,QAAQ,GAAG,GAAG,IAAI,CAAC,MAAM,IAAA,4BAAe,EAAC,OAAO,CAAC,CAAC,CAAC;QACzD,OAAO,CAAC,MAAM,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;IACxF,CAAC;CAAA;AAyEE,8BAAS;AAvEZ;;;;;GAKG;AACH,SAAe,SAAS,CACrB,YAAoB,EACpB,GAAe;;QAEf,MAAM,QAAQ,GAAG,GAAG,IAAI,CAAC,MAAM,IAAA,4BAAe,EAAC,OAAO,CAAC,CAAC,CAAC;QACzD,OAAO,CAAC,MAAM,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;IAC1F,CAAC;CAAA;AA4DE,8BAAS;AA1DZ;;;;;GAKG;AACF,SAAe,gBAAgB,CAC7B,UAAkB,EAClB,GAAe;;QAEf,MAAM,QAAQ,GAAG,GAAG,IAAI,CAAC,MAAM,IAAA,4BAAe,EAAC,OAAO,CAAC,CAAC,CAAC;QACzD,OAAO,CAAC,MAAM,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;IAC7E,CAAC;CAAA;AA+CE,4CAAgB;AA7CnB;;;;;GAKG;AACF,SAAe,WAAW,CACxB,YAAoB,EACpB,GAAe;;QAEf,MAAM,QAAQ,GAAG,GAAG,IAAI,CAAC,MAAM,IAAA,4BAAe,EAAC,OAAO,CAAC,CAAC,CAAC;QACzD,OAAO,CAAC,MAAM,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;IACzF,CAAC;CAAA;AAkCE,kCAAW;AAhCd;;;;;GAKG;AACH,SAAe,aAAa,CACzB,YAAoB,EACpB,GAAe;;QAEf,MAAM,QAAQ,GAAG,GAAG,IAAI,CAAC,MAAM,IAAA,4BAAe,EAAC,OAAO,CAAC,CAAC,CAAC;QACzD,OAAO,CAAC,MAAM,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,aAAa,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;IAC9F,CAAC;CAAA;AAqBE,sCAAa","file":"ledgers.js","sourcesContent":["import { resolveDIDToAccount } from './did';\nimport { buildConnection } from './connection';\nimport { sanitiseDid } from './did';\nimport { ApiPromise } from '@polkadot/api';\nimport { submitTransaction } from './common/helper';\nimport { KeyringPair } from '@polkadot/keyring/types';\nimport { encodeData, CURRENCY_CODE_BYTES } from './utils';\n\n// Extrinsic functions\n\n/**\n * Issue a new currency\n * @param {HexString} vcId\n * @param {Number} totalSupply\n * @param {KeyringPair} senderAccountKeyPair\n * @param {ApiPromise} api\n * @returns {Object} Transaction Object\n */\n async function issueToken(\n    vcId,\n    totalSupply,\n    senderAccountKeyPair: KeyringPair,\n    api: ApiPromise,\n ) {\n   const provider = api || (await buildConnection('local'));\n   const tx = provider.tx.tokens.issueToken(vcId, totalSupply);\n   let nonce = await provider.rpc.system.accountNextIndex(senderAccountKeyPair.address);\n   let signedTx = await tx.signAsync(senderAccountKeyPair, { nonce });\n   return submitTransaction(signedTx, provider);\n}\n\n/**\n * Mint token to given currency\n * @param {HexString} vcId\n * @param {KeyringPair} senderAccountKeyPair\n * @param {ApiPromise} api\n * @returns {Object} Transaction Object\n */\n async function mintToken(\n   vcId,\n   senderAccountKeyPair: KeyringPair,\n   api: ApiPromise,\n ) {\n   const provider = api || (await buildConnection('local'));\n   const tx = provider.tx.tokens.mintToken(vcId);\n   let nonce = await provider.rpc.system.accountNextIndex(senderAccountKeyPair.address);\n   let signedTx = await tx.signAsync(senderAccountKeyPair, { nonce });\n   return submitTransaction(signedTx, provider);\n}\n\n/**\n * Remove Token from circulation\n * @param {String} currencyCode\n * @param {HexString} vcId\n * @param {String} fromDid\n * @param {KeyringPair} senderAccountKeyPair\n * @param {ApiPromise} api\n * @returns {Object} Transaction Object\n */\n async function removeToken(\n  currencyCode,\n  vcId,\n  fromDid,\n  senderAccountKeyPair: KeyringPair,\n  api: ApiPromise,\n) {\n   const provider = api || (await buildConnection('local'));\n   let from_did_hex = sanitiseDid(fromDid);\n   let from_did_check = await resolveDIDToAccount(from_did_hex, provider);\n   if (!from_did_check) {\n        throw new Error('DID.DIDNotRegistered');\n   }\n   const tx = provider.tx.tokens.removeToken(currencyCode, vcId, from_did_hex);\n   let nonce = await provider.rpc.system.accountNextIndex(senderAccountKeyPair.address);\n   let signedTx = await tx.signAsync(senderAccountKeyPair, { nonce });\n   return submitTransaction(signedTx, provider);\n}\n\n/**\n * Set Balance of a DID of a given currency\n * @param {String} dest\n * @param {String} currencyCode\n * @param {Number} amount\n * @param {KeyringPair} senderAccountKeyPair\n * @param {ApiPromise} api\n * @returns {Object} Transaction Object\n */\n  async function setBalance(\n   dest,\n   currencyCode,\n   amount,\n   senderAccountKeyPair: KeyringPair,\n   api: ApiPromise,\n  ) {\n   const provider = api || (await buildConnection('local'));\n   let dest_hex = sanitiseDid(dest);\n   let dest_check = await resolveDIDToAccount(dest_hex, provider);\n   if (!dest_check) {\n      throw new Error('DID.DIDNotRegistered');\n   }\n   const tx = provider.tx.tokens.setBalance(dest_hex, sanitiseCCode(currencyCode), amount);\n   let nonce = await provider.rpc.system.accountNextIndex(senderAccountKeyPair.address);\n   let signedTx = await tx.signAsync(senderAccountKeyPair, { nonce });\n   return submitTransaction(signedTx, provider);\n}\n\n/**\n * Slash token from given currency\n * @param {HexString} vcId\n * @param {KeyringPair} senderAccountKeyPair\n * @param {ApiPromise} api\n * @returns {Object} Transaction Object\n */\nasync function slashToken(\n  vcId,\n  senderAccountKeyPair: KeyringPair,\n  api: ApiPromise,\n) {\n   const provider = api || (await buildConnection('local'));\n   const tx = provider.tx.tokens.slashToken(vcId);\n   let nonce = await provider.rpc.system.accountNextIndex(senderAccountKeyPair.address);\n   let signedTx = await tx.signAsync(senderAccountKeyPair, { nonce });\n   return submitTransaction(signedTx, provider);\n}\n\n/**\n * Transfer token balance to another account\n * @param {String} destDid\n * @param {String} currencyCode\n * @param {Number} amount\n * @param {KeyringPair} senderAccountKeyPair\n * @param {ApiPromise} api\n * @returns {Object} Transaction Object\n */\n async function transfer(\n   destDid,\n   currencyCode,\n   amount,\n   senderAccountKeyPair: KeyringPair,\n   api: ApiPromise,\n  ) {\n   const provider = api || (await buildConnection('local'));\n   let dest_did_hex = sanitiseDid(destDid);\n   let dest_did_check = await resolveDIDToAccount(dest_did_hex, provider);\n   if (!dest_did_check) {\n      throw new Error('DID.RecipentDIDNotRegistered');\n   }\n   const tx = provider.tx.tokens.transfer(dest_did_hex, sanitiseCCode(currencyCode), amount);\n   let nonce = await provider.rpc.system.accountNextIndex(senderAccountKeyPair.address);\n   let signedTx = await tx.signAsync(senderAccountKeyPair, { nonce });\n   return submitTransaction(signedTx, provider);\n}\n\n/**\n * Transfer all token balance to another account\n * @param {String} destDid\n * @param {String} currencyCode\n * @param {KeyringPair} senderAccountKeyPair\n * @param {ApiPromise} api\n * @returns {Object} Transaction Object\n */\n async function transferAll(\n   destDid,\n   currencyCode,\n   senderAccountKeyPair: KeyringPair,\n   api: ApiPromise,\n  ) {\n   const provider = api || (await buildConnection('local'));\n   let dest_did_hex = sanitiseDid(destDid);\n   let dest_did_check = await resolveDIDToAccount(dest_did_hex, provider);\n   if (!dest_did_check) {\n      throw new Error('DID.RecipentDIDNotRegistered');\n   }\n   const tx = provider.tx.tokens.transferAll(dest_did_hex, sanitiseCCode(currencyCode));\n   let nonce = await provider.rpc.system.accountNextIndex(senderAccountKeyPair.address);\n   let signedTx = await tx.signAsync(senderAccountKeyPair, { nonce });\n   return submitTransaction(signedTx, provider);\n}\n\n/**\n * Transfer token balance to another account\n * @param {String} destDid\n * @param {String} currencyCode\n * @param {Number} amount\n * @param {String} memo\n * @param {KeyringPair} senderAccountKeyPair\n * @param {ApiPromise} api\n * @returns {Object} Transaction Object\n */\n async function transferTokenWithMemo(\n   destDid,\n   currencyCode,\n   amount,\n   memo,\n   senderAccountKeyPair: KeyringPair,\n   api: ApiPromise,\n  ) {\n   const provider = api || (await buildConnection('local'));\n   let dest_did_hex = sanitiseDid(destDid);\n   let dest_did_check = await resolveDIDToAccount(dest_did_hex, provider);\n   if (!dest_did_check) {\n      throw new Error('DID.RecipentDIDNotRegistered');\n   }\n   const tx = provider.tx.tokens.transfer(dest_did_hex, sanitiseCCode(currencyCode), amount, memo);\n   let nonce = await provider.rpc.system.accountNextIndex(senderAccountKeyPair.address);\n   let signedTx = await tx.signAsync(senderAccountKeyPair, { nonce });\n   return submitTransaction(signedTx, provider);\n}\n\n/**\n * Transfer tokens to a DID\n * @param {HexString} vcId\n * @param {string} toDid\n * @param {KeyringPair} senderAccountKeyPair\n * @param {ApiPromise} api\n * @returns {Object} Transaction Object\n */\n async function transferToken(\n   vcId,\n   toDid,\n   senderAccountKeyPair: KeyringPair,\n   api: ApiPromise,\n   ) {\n\n   let to_did_hex = sanitiseDid(toDid);\n   let to_did_check = await resolveDIDToAccount(to_did_hex, api);\n   if (!to_did_check) {\n       throw new Error('DID.RecipentDIDNotRegistered');\n   }\n   const provider = api || (await buildConnection('local'));\n   const tx = provider.tx.tokens.transferToken(vcId, to_did_hex);\n   let nonce = await provider.rpc.system.accountNextIndex(senderAccountKeyPair.address);\n   let signedTx = await tx.signAsync(senderAccountKeyPair, { nonce });\n   return submitTransaction(signedTx, provider);\n}\n\n/**\n * Sanitise Token Name\n * @param {String} token\n * @returns {String} Sanitised Token Name\n */\n const sanitiseCCode = (token) => {\n   if(!token) return null;\n   if (token.startsWith('0x'))\n      return token.padEnd(CURRENCY_CODE_BYTES, '\\0');\n   return encodeData(token.padEnd(CURRENCY_CODE_BYTES, '\\0'), 'currency_code');\n}\n\n// Storage Query Functions\n\n/**\n * Get the token balance of an account\n * @param {String} currencyCode\n * @param {String} did\n * @param {ApiPromise} api\n */\n async function accounts(\n   currencyCode: String,\n   did: String,\n   api: ApiPromise,\n  ) {\n   const provider = api || (await buildConnection('local'));\n   return (await provider.query.tokens.accounts(sanitiseCCode(currencyCode), sanitiseDid(did))).toJSON();\n}\n\n/**\n * Get any liquidity locks of a token type under an account\n * @param {String} currencyCode\n * @param {String} did\n * @param {ApiPromise} api\n */\n async function locks(\n   currencyCode: String,\n   did: String,\n   api: ApiPromise,\n  ) {\n   const provider = api || (await buildConnection('local'));\n   return (await provider.query.tokens.locks(sanitiseCCode(currencyCode), sanitiseDid(did))).toJSON();\n}\n\n/**\n * Storage map between currency code and block number \n * @param {ApiPromise} api\n * @param {String} currencyCode (Optional)\n */\n async function removedTokens(\n   api: ApiPromise,\n   currencyCode?: String,\n  ) {\n   const provider = api || (await buildConnection('local'));\n   return (await provider.query.tokens.removedTokens(sanitiseCCode(currencyCode))).toJSON();\n}\n\n/**\n * Token currency counter\n * @param {ApiPromise} api\n */\n async function tokenCurrencyCounter(\n   api: ApiPromise,\n  ) {\n   const provider = api || (await buildConnection('local'));\n   return (await provider.query.tokens.tokenCurrencyCounter()).toString();\n}\n\n/**\n * Map to store a friendly token name for token\n * @param {String} currencyCode\n * @param {ApiPromise} api\n */\n async function tokenData(\n   currencyCode: String,\n   api: ApiPromise,\n  ) {\n   const provider = api || (await buildConnection('local'));\n   return (await provider.query.tokens.tokenData(sanitiseCCode(currencyCode))).toJSON();\n}\n\n/**\n * Get Token Information\n * @param {String} currencyCode\n * @param {ApiPromise} api\n * @returns {Number} Currency Id\n */\nasync function tokenInfo(\n   currencyCode: String,\n   api: ApiPromise,\n  ) {\n   const provider = api || (await buildConnection('local'));\n   return (await provider.query.tokens.tokenInfo(sanitiseCCode(currencyCode))).toString();\n}\n\n/**\n * Reverse lookup Token Information\n * @param {Number} currencyId\n * @param {ApiPromise} api\n * @returns {HexString} Currency Code Hex\n */\n async function tokenInfoRLookup(\n   currencyId: Number,\n   api: ApiPromise,\n  ) {\n   const provider = api || (await buildConnection('local'));\n   return (await provider.query.tokens.tokenInfoRLookup(currencyId)).toHex();\n}\n\n/**\n * Lookup Token Issuer\n * @param {String} currencyCode\n * @param {ApiPromise} api\n * @returns {HexString} Token Owner DID Hex\n */\n async function tokenIssuer(\n   currencyCode: String,\n   api: ApiPromise,\n  ) {\n   const provider = api || (await buildConnection('local'));\n   return (await provider.query.tokens.tokenIssuer(sanitiseCCode(currencyCode))).toHex();\n}\n\n/**\n * Get Total Token Issuance\n * @param {String} currencyCode\n * @param {ApiPromise} api\n * @returns {Number} Token Issuance\n */\nasync function totalIssuance(\n   currencyCode: String,\n   api: ApiPromise,\n  ) {\n   const provider = api || (await buildConnection('local'));\n   return (await provider.query.tokens.totalIssuance(sanitiseCCode(currencyCode))).toString();\n}\n\nexport {\n   issueToken,\n   mintToken,\n   removeToken,\n   setBalance,\n   slashToken,\n   transfer,\n   transferAll,\n   transferTokenWithMemo,\n   transferToken,\n   sanitiseCCode,\n   accounts,\n   locks,\n   removedTokens,\n   tokenCurrencyCounter,\n   tokenData,\n   tokenInfo,\n   tokenInfoRLookup,\n   tokenIssuer,\n   totalIssuance\n};"]}