{"version":3,"sources":["../src/vc.ts"],"names":[],"mappings":"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","file":"vc.js","sourcesContent":["import { buildConnection } from \"./connection\";\nimport { ApiPromise } from \"@polkadot/api\";\nimport { KeyringPair } from \"@polkadot/keyring/types\";\nimport { submitTransaction } from \"./common/helper\";\nimport { sanitiseDid } from \"./did\";\nimport { signatureVerify, blake2AsHex } from \"@polkadot/util-crypto\";\nimport { hexToU8a } from \"@polkadot/util\";\nimport { HexString } from \"@polkadot/util/types\";\nimport { AnyJson } from \"@polkadot/types/types\";\nimport { did, utils } from \".\";\nimport { decodeHex, hexToString, VCType } from \"./utils\";\nimport { SSID_BASE_URL } from \"./config\";\nimport axios from \"axios\";\n\n/**\n * Encodes Token VC and pads with appropriate bytes\n * @param {Object} TokenVC\n * @param {string} TokenVC.tokenName\n * @param {string} TokenVC.reservableBalance\n * @param {string} TokenVC.decimal\n * @param {string} TokenVC.currencyCode\n * @returns {HexString} Token VC Hex String\n */\nfunction createTokenVC({ tokenName, reservableBalance, decimal, currencyCode}) {\n    if(!tokenName) {\n        throw new Error('Token name is required');\n    }\n    if(tokenName.length > utils.TOKEN_NAME_BYTES) {\n        throw new Error('Token name should not exceed 16 chars');\n    }\n    if(!currencyCode) {\n        throw new Error('Currency code is required');\n    }\n    if(currencyCode.length > utils.CURRENCY_CODE_BYTES) {\n        throw new Error('Currency Code should not exceed 8 chars');\n    }\n    if(!utils.isUpperAndValid(currencyCode)){\n        throw new Error('Only Upper case characters with no space are allowed for currency code');\n    }\n    if(!reservableBalance) {\n        throw new Error('Reservable balance is required');\n    }\n    if(!decimal) {\n        throw new Error('Decimal is required');\n    }\n\n    let vcProperty = {\n        token_name: utils.encodeData(tokenName.padEnd(utils.TOKEN_NAME_BYTES, '\\0'), 'token_bytes'),\n        reservable_balance: utils.encodeData(reservableBalance*(Math.pow(10, 6)), 'Balance'),\n        decimal: utils.encodeData(decimal, 'decimal'),\n        currency_code: utils.encodeData(currencyCode.padEnd(utils.CURRENCY_CODE_BYTES, '\\0'), 'currency_code'),\n    };\n    return utils.encodeData(vcProperty, utils.VCType.TokenVC)\n        .padEnd((utils.VC_PROPERTY_BYTES * 2)+2, '0'); // *2 for hex and +2 bytes for 0x\n}\n\n\n/** Encodes Token VC and pads with appropriate bytes\n * @param  {Object} MintSlashVC VC Property\n * @param  {String} MintSlashVC.vcId VC Id\n * @param  {String} MintSlashVC.amount In Highest Form\n * @returns {HexString} Token VC Hex String\n */\n async function createMintSlashVC({ vc_id, currencyCode, amount }) {\n  let vcProperty = {\n    vc_id: vc_id,\n    currency_code: utils.encodeData(currencyCode.padEnd(utils.CURRENCY_CODE_BYTES, '\\0'), 'currency_code'),\n    amount: utils.encodeData(amount, 'Balance'),\n  };\n  return utils.encodeData(vcProperty, VCType.SlashMintTokens)\n    .padEnd((utils.VC_PROPERTY_BYTES * 2) + 2, '0'); // *2 for hex and +2 bytes for 0x\n}\n\n\n/** Encodes Token VC and pads with appropriate bytes\n * @param  {Object} vcProperty VC Property\n * @param  {string} vcProperty.vcId VC Id\n * @param  {string} vcProperty.amount In Highest Form\n * @returns {HexString} Token VC Hex String\n */\nasync function createTokenTransferVC({ vc_id, currencyCode, amount }) {\n  let vcProperty = {\n    vc_id: vc_id,\n    currency_code: utils.encodeData(currencyCode.padEnd(utils.CURRENCY_CODE_BYTES, '\\0'), 'currency_code'),\n    amount: utils.encodeData(amount, 'Balance'),\n  };\n  return utils.encodeData(vcProperty, VCType.TokenTransferVC)\n    .padEnd((utils.VC_PROPERTY_BYTES * 2) + 2, '0'); // *2 for hex and +2 bytes for 0x\n}\n\n\n/** Encodes Generic VC and pads with appropriate bytes\n * @param  {Object} vcProperty\n * @param  {string} vcProperty.cid\n * @returns {HexString} Token VC Hex String\n */\nfunction createGenericVC({ cid }) {\n  let vcProperty = {\n    cid: utils.encodeData(cid.padEnd(utils.CID_BYTES, '\\0'), 'CID'),\n  };\n  return utils.encodeData(vcProperty, VCType.GenericVC)\n    .padEnd((utils.VC_PROPERTY_BYTES * 2) + 2, '0'); // *2 for hex and +2 bytes for 0x\n}\n\n\n/**\n * Create Public Did VC\n * @param {Object} publicDidVC\n * @param {string} publicDidVC.public_key\n * @param {string} publicDidVC.registration_number\n * @param {string} publicDidVC.company_name\n * @param {string} publicDidVC.did\n * @returns {HexString} Public Did VC Hex String\n */\nfunction createPublicDidVC({ public_key, registration_number, company_name, did }) {\n  let vcProperty = {\n    public_key: utils.encodeData(public_key, 'PublicKey'),\n    registration_number: utils.encodeData(registration_number, 'RegistrationNumber'),\n    company_name: utils.encodeData(company_name, 'CompanyName'),\n    did: sanitiseDid(did),\n  };\n  return utils.encodeData(vcProperty, VCType.PublicDidVC)\n    .padEnd((utils.VC_PROPERTY_BYTES * 2) + 2, '0'); // *2 for hex and +2 bytes for 0x\n}\n\n\n/**\n * Create Private Did VC\n * @param {Object} privateDidVC\n * @param {string} privateDidVC.public_key\n * @param {string} privateDidVC.did\n * @returns {HexString} Private Did VC Hex String\n */\nfunction createPrivateDidVC({ public_key, did }) {\n  let vcProperty = {\n    public_key: utils.encodeData(public_key, 'PublicKey'),\n    did: sanitiseDid(did),\n  };\n  return utils.encodeData(vcProperty, VCType.PrivateDidVC)\n    .padEnd((utils.VC_PROPERTY_BYTES * 2) + 2, '0'); // *2 for hex and +2 bytes for 0x\n}\n\n\n/**\n * Create VC\n * @param  {Object} vcProperty\n * @param  {string} owner Did\n * @param  {string[]} issuers Array of Did\n * @param  {string} vcType TokenVC, MintTokens, SlashTokens, TokenTransferVC, GenericVC\n * @param  {KeyPair} sigKeypair Owner Key Ring pair\n * @param  {string} ssidUrl (Optional)\n * @returns {string} VC Hex String\n */\n\n async function generateVC(vcProperty, owner, issuers, vcType, sigKeypair, ssidUrl?: string) {\n  let encodedVCProperty, encodedData, hash;\n  switch (vcType) {\n    case VCType.TokenVC:\n      encodedVCProperty = createTokenVC(vcProperty);\n      break;\n    case VCType.MintTokens:\n    case VCType.SlashTokens:\n      encodedVCProperty = await createMintSlashVC(vcProperty);\n      break;\n    case VCType.TokenTransferVC:\n      encodedVCProperty = await createTokenTransferVC(vcProperty);\n      break;\n    case VCType.GenericVC:\n      encodedVCProperty = createGenericVC(vcProperty);\n      let genericVCData = await getGenericVCDataByCId(vcProperty.cid, ssidUrl);\n      hash = genericVCData.hash;\n      break;\n    case VCType.PublicDidVC:\n      encodedVCProperty = createPublicDidVC(vcProperty);\n      break;\n    case VCType.PrivateDidVC:\n      encodedVCProperty = createPrivateDidVC(vcProperty);\n      break;\n    default:\n      throw new Error(\"Unknown VC Type\");\n  }\n  owner = did.sanitiseDid(owner);\n  issuers = issuers.map(issuer => did.sanitiseDid(issuer));\n  if (vcType != VCType.GenericVC) {\n    encodedData = utils.encodeData({\n      vc_type: vcType,\n      vc_property: encodedVCProperty,\n      owner: owner,\n      issuers: issuers,\n    }, \"VC_HEX\");\n    hash = blake2AsHex(encodedData);\n  }\n  const sign = utils.bytesToHex(sigKeypair.sign(hash));\n  let vcObject = {\n    hash,\n    owner,\n    issuers,\n    signatures: [sign],\n    is_vc_used: false,\n    is_vc_active: false,\n    vc_type: vcType,\n    vc_property: encodedVCProperty,\n  };\n  return utils.encodeData(vcObject, 'VC');\n}\n\n// Chain State Query Functions\n\n/**\n * Lookup a VC \n * @param {HexString} did VC Owner's did\n * @param {ApiPromise} api\n * @returns {JSON} VC Object\n */\nasync function getVCIdsByDID(\n  did: string, \n  api: ApiPromise,\n) {\n    const provider = api || (await buildConnection('local'));\n    return await (await provider.query.vc.lookup(sanitiseDid(did))).toJSON();\n}\n\n\n/**\n * Reverse lookup a VC ID\n * @param {HexString} vcId\n * @param {ApiPromise} api\n * @returns {JSON} VC Object\n */\nasync function getDIDByVCId(\n  vcId: HexString, \n  api: ApiPromise\n) {\n    const provider = api || (await buildConnection('local'));\n    return await (await provider.query.vc.rLookup(vcId)).toJSON();\n}\n\n\n/**\n * Get VCs by VC ID\n * @param {HexString} vcId\n * @param {ApiPromise} api\n * @returns {JSON} VC Object\n */\nasync function getVCs(\n  vcId: HexString, \n  api: ApiPromise,\n) {\n    const provider = api || (await buildConnection('local'));\n    return (await provider.query.vc.vCs(vcId)).toJSON();\n}\n\n\n/**\n * Get VC Approver List from the chain\n * @param {HexString} vcId\n * @param {ApiPromise} api\n * @returns {JSON} VC Approver List\n */\nasync function getVCApprovers(\n  vcId: HexString, \n  api: ApiPromise,\n) {\n    const provider = api || (await buildConnection('local'));\n    return (await provider.query.vc.vcApproverList(vcId)).toJSON();\n}\n\n\n/**\n * Get VC History using vcId\n * @param {HexString} vcId\n * @param {ApiPromise} api\n * @returns {JSON} VC History\n */\nasync function getVCHistoryByVCId(\n  vcId: HexString, \n  api: ApiPromise,\n) {\n    const provider = api || (await buildConnection('local'));\n    return await (await provider.query.vc.vcHistory(vcId)).toJSON();\n}\n\n\n/**\n * Get Generic vc data\n * @param {string} vcId\n * @param {ApiPromise} api\n * @returns {JSON} Generic VC data\n */\n async function getGenericVCDataByCId(cid, ssidUrl?: String) {\n  ssidUrl = ssidUrl || SSID_BASE_URL.local;\n  let body = {\n    action: \"get_vc\",\n    cid: cid.startsWith('0x') ? utils.hexToString(cid) : cid,\n  };\n  const { data: { message } } = await axios.post(`${ssidUrl}/handleGenericVC`, body);\n  return { data: message.data, hash: message.hash };\n}\n\n/**\n * Get Generic vc data\n * @param {string} vcId\n * @param {ApiPromise} api\n * @returns {JSON} Generic VC data\n */\nasync function getGenericVCData(vcId, ssidUrl: string, api: ApiPromise): Promise<AnyJson> {\n  const provider = await api || (await buildConnection('local'));\n  const vc:any = await getVCs(vcId, provider);\n  if (!vc) return null\n  const vc_property = decodeVCProperty(vc.vcProperty, vc.vcType);\n  const { data, hash } = await getGenericVCDataByCId(vc_property.cid, ssidUrl);\n  return { data, hash, vcId, issuers: vc.issuers };\n}\n\n\n/**\n * Verify Generic Vc data\n * @param {string} vcId\n * @param {Object} data\n * @param {ApiPromise} api\n * @returns {Boolean} true if verified\n */\n async function verifyGenericVC(vcId, data, api: ApiPromise) {\n  try {\n    const provider = api || (await buildConnection('local'));\n    const vc:any = await getVCs(vcId, provider);\n    // console.log(vc);\n    // Verify Hash\n    const generateHash = utils.generateObjectHash(data);\n    if (vc.hash !== generateHash) {\n      throw new Error(\"Hash mismatch\");\n    }\n\n    const history = await getVCHistoryByVCId(vcId, provider);\n    // console.log(\"VC History : \", history);\n    if (!history) return false\n\n    // Get public keys\n    const publicKeys = await Promise.all(vc.issuers.map(issuer => did.resolveDIDToAccount(issuer, provider, history[1])));\n\n    // Verify signature\n    vc.signatures.forEach(sign => {\n      let isSignValid = false;\n      publicKeys.forEach(key => {\n        if (!key) {\n          return;\n        }\n        if (signatureVerify(hexToU8a(vc.hash), hexToU8a(sign), key.toString()).isValid) {\n          isSignValid = true;\n        }\n      });\n      if (!isSignValid) {\n        throw new Error(\"Signature verification failed\");\n      }\n    });\n    return true;\n  }\n  catch (err) {\n    console.log(\"VC Verification Failed: \", err);\n    return false;\n  }\n}\n\n// Extrinsics Functions\n\n/**\n* Approve VC\n* @param  {HexString} vcID vc_id of VC to be approved\n* @param  {KeyringPair} senderAccountKeyPair Issuer Key Ring pair\n* @param {ApiPromise} api\n* @returns {Object} Transaction Object\n*/\nasync function approveVC(vcId: HexString, senderAccountKeyPair: KeyringPair, api: ApiPromise, ssidUrl?: string) {\n    const provider = api || (await buildConnection('local'));\n\n    // fetching VC from chain\n    let vc_details = await getVCs(vcId, provider);\n    if (!vc_details) {\n      throw new Error('VC not found');\n    }\n\n    const vc:any = vc_details;\n    let hash;\n\n    // generating the signature\n    if (vc.vcType != VCType.GenericVC) {\n      const encodedData = utils.encodeData({\n        vc_type: vc.vcType,\n        vc_property: vc.vcProperty,\n        owner: vc.owner,\n        issuers: vc.issuers\n      }, \"VC_HEX\");\n      hash = blake2AsHex(encodedData);\n    } else {\n      const vcProperty = decodeVCProperty(vc.vcProperty, vc.vcType);\n      let genericVCData = await getGenericVCDataByCId(vcProperty.cid, ssidUrl);\n      hash = genericVCData.hash;\n    }\n    const sign = utils.bytesToHex(senderAccountKeyPair.sign(hash));\n    const tx = provider.tx.vc.addSignature(vcId, sign);\n    let nonce = await provider.rpc.system.accountNextIndex(senderAccountKeyPair.address);\n    let signedTx = await tx.signAsync(senderAccountKeyPair, { nonce });\n    return submitTransaction(signedTx, provider);\n}\n\n\n/**\n * Store VC Hex in the chain\n * @param {HexString} vcHex\n * @param {KeyringPair} senderAccountKeyPair\n * @param {ApiPromise} api\n * @returns {Object} Transaction Object\n */\nasync function storeVC(\n  vcHex: HexString, \n  senderAccountKeyPair: KeyringPair, \n  api: ApiPromise\n) {\n    const provider = api || (await buildConnection(\"local\"));\n    const tx = provider.tx.vc.store(vcHex);\n    let nonce = await provider.rpc.system.accountNextIndex(senderAccountKeyPair.address);\n    let signedTx = await tx.signAsync(senderAccountKeyPair, { nonce });\n    return submitTransaction(signedTx, provider);\n}\n\n/**\n * Update Status of a VC ID\n * @param {string} vcId\n * @param {Boolean} vcStatus\n * @param {KeyringPair} senderAccountKeyPair\n * @param {ApiPromise} api\n * @returns {Object} Transaction Object\n */\nasync function updateStatus(\n  vcId: HexString,\n  vcStatus: boolean,\n  senderAccountKeyPair: KeyringPair,\n  api: ApiPromise,\n) {\n    const provider = api || (await buildConnection(\"local\"));\n    const tx = provider.tx.vc.updateStatus(vcId, vcStatus);\n    let nonce = await provider.rpc.system.accountNextIndex(senderAccountKeyPair.address);\n    let signedTx = await tx.signAsync(senderAccountKeyPair, { nonce });\n    return submitTransaction(signedTx, provider);\n}\n\n// Util Functions - Encode / Decode / getFormattedTokenAmount\n\n\n /** function that decodes hex of createTokenVC\n * @param  {string} hexValue Hex String to be decoded\n * @param  {string} typeKey Key from METABLOCKCHAIN_TYPES which represents type of data\n * @returns {Object | string} Decoded Object/String\n */\n  function decodeVCProperty(hexValue, VCType) {\n    let vcs = decodeHex(hexValue, VCType);\n    switch(vcs.vc_type) {\n      case VCType.TokenVC:\n        vcs[\"token_name\"] = hexToString(vcs.token_name);\n        vcs[\"currency_code\"] = hexToString(vcs.currency_code);\n        break;\n      case VCType.PublicDidVC:\n        vcs[\"did\"] = hexToString(vcs.did);\n        vcs[\"registration_number\"] = hexToString(vcs.registration_number);\n        vcs[\"company_name\"] = hexToString(vcs.company_name);\n        break;\n      case VCType.PrivateDidVC:\n        vcs[\"did\"] = hexToString(vcs.did);\n        break;\n    }\n    return vcs;\n   }\n  \n/** function that decodes hex of createVC where type is TokenVC to it's corresponding object/value\n * @param  {string} hexValue Hex String to be decoded\n * @param  {string} typeKey Key from METABLOCKCHAIN_TYPES which represents type of data\n * @returns {Object | string} Decoded Object/String\n */\nfunction decodeVC(hexValue) {\n    let vc = decodeHex(hexValue, \"VC\");\n    vc[\"owner\"] = hexToString(vc.owner);\n    let issuer_did: any = [];\n    for(let i=0; i<vc.issuers.length; i++){\n        issuer_did.push(hexToString(vc.issuers[i]));\n    }\n    vc[\"issuers\"] = issuer_did;\n    switch(vc.vc_type) {\n        \n        case VCType.MintTokens:\n        case VCType.SlashTokens:\n        vc[\"vc_property\"] = decodeVCProperty(vc.vc_property, VCType.SlashMintTokens);\n        break;\n\n        case VCType.GenericVC:\n        case VCType.PublicDidVC:\n        case VCType.PrivateDidVC:\n        case VCType.TokenVC:\n        case VCType.TokenTransferVC:\n        vc[\"vc_property\"] = decodeVCProperty(vc.vc_property, vc.vc_type);\n        \n        default:\n        throw new Error(\"Unknown Type\");\n    }\n    return vc;\n}\n\n/**\n * @param {string} tokenSymbol \n * @param {string} tokenAmount \n * @param {ApiPromise} api \n * @returns {string} Formatted Token Amount\n */\n\nasync function getFormattedTokenAmount(\n  tokenSymbol: string,\n  tokenAmount: string,\n  api: ApiPromise\n) {\n    const token = await api.rpc.system.properties();\n    const tokenData: any = token.toHuman();\n    let amount_decimals = 0;\n\n    if(hexToString(tokenSymbol) !== tokenData.tokenSymbol[0]) {\n      throw new Error(\"Invalid token symbol\");\n    }\n    // Check if valid number or not\n    if (isNaN(Number(tokenAmount))) {\n      throw new Error(`Invalid token amount!`);\n    }\n    if (String(tokenAmount).includes('.')) {\n      amount_decimals = String(tokenAmount).split('.')[1].length;\n    };\n    if (amount_decimals > Number(tokenData?.['tokenDecimals'][0])) {\n      throw new Error(`Invalid token amount, max supported decimal by ${tokenData?.['tokenSymbol'][0]} is ${tokenData?.['tokenDecimals'][0]}`);\n    }\n    tokenAmount = String(Math.round(parseFloat(tokenAmount) * (Math.pow(10, tokenData?.['tokenDecimals'][0]))));\n    return tokenAmount;\n}\n\nexport {\n    createTokenVC,\n    createMintSlashVC,\n    createTokenTransferVC,\n    createGenericVC,\n    createPublicDidVC,\n    createPrivateDidVC,\n    getVCIdsByDID,\n    getDIDByVCId,\n    getVCs,\n    getVCApprovers,\n    getVCHistoryByVCId,\n    getGenericVCData,\n    generateVC,\n    verifyGenericVC,\n    approveVC,\n    storeVC,\n    updateStatus,\n    decodeVC,\n    decodeVCProperty,\n    getFormattedTokenAmount,\n};"]}