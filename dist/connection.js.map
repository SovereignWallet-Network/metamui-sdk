{"version":3,"sources":["../src/connection.ts"],"names":[],"mappings":";;;AAAA,uCAAuD;AACvD,qCAAmD;AACnD,mCAA+C;AAE/C,MAAM,gBAAgB,GAAG;IACvB,KAAK,EAAE,gCAAuB,CAAC,KAAK;IACpC,GAAG,EAAE,gCAAuB,CAAC,GAAG;IAChC,IAAI,EAAE,gCAAuB,CAAC,IAAI;IAClC,OAAO,EAAE,gCAAuB,CAAC,OAAO;IACxC,OAAO,EAAE,gCAAuB,CAAC,OAAO;CACzC,CAAC;AAEF,IAAI,gBAAqC,CAAC;AAE1C,SAAS,kBAAkB,CAAC,OAAO,GAAG,OAAO;IAC3C,IAAI,CAAC,CAAC,OAAO,IAAI,gBAAgB,CAAC;QAAE,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;IAExE,MAAM,QAAQ,GAAG,IAAI,gBAAU,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC;IAC3D,OAAO,gBAAU,CAAC,MAAM,CAAC;QACvB,QAAQ;QACR,KAAK,EAAE,4BAAoB;KAC5B,CAAC,CAAC;AACL,CAAC;AAED;;;;;;;GAOG;AACH,SAAS,eAAe,CAAC,OAAO,GAAG,OAAO,EAAE,WAAW,GAAG,KAAK;IAC7D,IAAI,CAAC,gBAAgB,IAAI,WAAW,EAAE;QACpC,OAAO,CAAC,GAAG,CAAC,oCAAoC,CAAC,CAAC;QAClD,gBAAgB,GAAG,kBAAkB,CAAC,OAAO,CAAC,CAAC;KAChD;IACD,OAAO,gBAAgB,CAAC;AAC1B,CAAC;AAkBC,0CAAe;AAhBjB;;;;GAIG;AACH,SAAS,oBAAoB,CAAC,MAAc,EAAE,eAAqB;IACjE,IAAG,CAAC,eAAe;QAAE,eAAe,GAAG,4BAAoB,CAAC;IAC5D,MAAM,QAAQ,GAAG,IAAI,gBAAU,CAAC,MAAM,CAAC,CAAC;IACtC,OAAO,CAAC,GAAG,CAAC,gDAAgD,CAAC,CAAC;IAC9D,OAAO,gBAAU,CAAC,MAAM,CAAC;QACvB,QAAQ;QACR,KAAK,EAAE,eAAe;KACvB,CAAC,CAAC;AACP,CAAC;AAIC,oDAAoB","file":"connection.js","sourcesContent":["import { ApiPromise, WsProvider } from '@polkadot/api';\nimport { METABLOCKCHAIN_PROVIDER } from './config';\nimport { METABLOCKCHAIN_TYPES } from './utils';\n\nconst NETWORK_PROVIDER = {\n  local: METABLOCKCHAIN_PROVIDER.LOCAL,\n  dev: METABLOCKCHAIN_PROVIDER.DEV,\n  demo: METABLOCKCHAIN_PROVIDER.DEMO,\n  testnet: METABLOCKCHAIN_PROVIDER.TESTNET,\n  mainnet: METABLOCKCHAIN_PROVIDER.MAINNET,\n};\n\nlet providerInstance: Promise<ApiPromise>;\n\nfunction buildNewConnection(network = 'local'): Promise<ApiPromise> {\n  if (!(network in NETWORK_PROVIDER)) throw new Error('Invalid Network!');\n\n  const provider = new WsProvider(NETWORK_PROVIDER[network]);\n  return ApiPromise.create({\n    provider,\n    types: METABLOCKCHAIN_TYPES,\n  });\n}\n\n/**\n * Return an ApiPromise object\n * @param {string} network MetaMUI network provider to connect\n * @param {boolean} ignoreCache (optional) (default=true)\n * @returns {ApiPromise} ApiPromise object\n * Note : setting the ignoreCache value to true will create a new ws\n * ws conection on every call\n */\nfunction buildConnection(network = 'local', ignoreCache = false): Promise<ApiPromise> {\n  if (!providerInstance || ignoreCache) {\n    console.log('Creating new websocket connection!');\n    providerInstance = buildNewConnection(network);\n  }\n  return providerInstance;\n}\n\n/**\n * Return an ApiPromise object\n * @param {string} wssUrl Tokenchain network wss URL to connect\n * @returns {ApiPromise} ApiPromise object\n */\nfunction buildConnectionByUrl(wssUrl: string, blockchainTypes?: any): Promise<ApiPromise> {\n  if(!blockchainTypes) blockchainTypes = METABLOCKCHAIN_TYPES;\n  const provider = new WsProvider(wssUrl);\n    console.log('Creating new websocket connection via WSS URL!');\n    return ApiPromise.create({\n      provider,\n      types: blockchainTypes,\n    });\n}\n\nexport {\n  buildConnection,\n  buildConnectionByUrl\n};\n"]}