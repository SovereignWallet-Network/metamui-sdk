{"version":3,"sources":["../src/token.ts"],"names":[],"mappings":"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","file":"token.js","sourcesContent":[" import { resolveDIDToAccount } from './did';\n import { buildConnection } from './connection';\n import { sanitiseDid } from './did';\n import { ApiPromise } from '@polkadot/api';\n import { submitTransaction } from './common/helper';\n import { KeyringPair } from '@polkadot/keyring/types';\nimport { encodeData, CURRENCY_CODE_BYTES } from './utils';\n\n /**\n  * Mint token to given currency\n  * @param {HexString} vcId\n  * @param {KeyringPair} senderAccountKeyPair\n  * @param {ApiPromise} api\n  * @returns {Object} Transaction Object\n  */\n  async function mintToken(\n    vcId,\n    senderAccountKeyPair: KeyringPair,\n    api: ApiPromise,\n  ) {\n     const provider = api || (await buildConnection('local'));\n     const tx = provider.tx.token.mintToken(vcId);\n     let nonce = await provider.rpc.system.accountNextIndex(senderAccountKeyPair.address);\n     let signedTx = await tx.signAsync(senderAccountKeyPair, { nonce });\n     return submitTransaction(signedTx, provider);\n  }\n \n /**\n  * Slash token from given currency\n  * @param {HexString} vcId\n  * @param {KeyringPair} senderAccountKeyPair\n  * @param {ApiPromise} api\n  * @returns {Object} Transaction Object\n  */\n async function slashToken(\n   vcId,\n   senderAccountKeyPair: KeyringPair,\n   api: ApiPromise,\n ) {\n    const provider = api || (await buildConnection('local'));\n    const tx = provider.tx.token.slashToken(vcId);\n    let nonce = await provider.rpc.system.accountNextIndex(senderAccountKeyPair.address);\n    let signedTx = await tx.signAsync(senderAccountKeyPair, { nonce });\n    return submitTransaction(signedTx, provider);\n }\n \n/**\n * Transfer tokens to a DID\n * @param {HexString} vcId\n * @param {string} toDid\n * @param {KeyringPair} senderAccountKeyPair\n * @param {ApiPromise} api\n * @returns {Object} Transaction Object\n*/\nasync function transferToken(\n    vcId,\n    toDid,\n    senderAccountKeyPair: KeyringPair,\n    api: ApiPromise,\n    ) {\n\n    let to_did_hex = sanitiseDid(toDid);\n    let to_did_check = await resolveDIDToAccount(to_did_hex, api);\n    if (!to_did_check) {\n        throw new Error('DID.RecipentDIDNotRegistered');\n    }\n    const provider = api || (await buildConnection('local'));\n    const tx = provider.tx.token.transferToken(vcId, to_did_hex);\n    let nonce = await provider.rpc.system.accountNextIndex(senderAccountKeyPair.address);\n    let signedTx = await tx.signAsync(senderAccountKeyPair, { nonce });\n    return submitTransaction(signedTx, provider);\n}\n\n/**\n * Withdraw Reserved tokens from one DID to another DID\n * @param {string} toDid\n * @param {string} fromDid\n * @param {Number} amount\n * @param {KeyringPair} senderAccountKeyPair\n * @param {ApiPromise} api\n * @returns {Object} Transaction Object\n */\nasync function withdrawReserved(\n    toDid,\n    fromDid,\n    amount,\n    senderAccountKeyPair: KeyringPair,\n    api: ApiPromise,\n    ) {\n\n    let [to_account_id, from_account_id] = await Promise.all([\n        resolveDIDToAccount(\n            sanitiseDid(toDid), \n            api\n        ), \n        resolveDIDToAccount(\n            sanitiseDid(fromDid), \n            api\n        )\n    ]);\n    if (!to_account_id) {\n        throw new Error('DID.RecipentDIDNotRegistered');\n    }\n    if (!from_account_id) {\n        throw new Error('DID.SenderDIDNotRegistered');\n    }\n\n    const provider = api || (await buildConnection('local'));\n    const tx = provider.tx.token.withdrawReserved(sanitiseDid(toDid), sanitiseDid(fromDid), amount);\n    let nonce = await provider.rpc.system.accountNextIndex(senderAccountKeyPair.address);\n    let signedTx = await tx.signAsync(senderAccountKeyPair, { nonce });\n    return submitTransaction(signedTx, provider);\n}\n\n/**\n * Sanitise Token Name\n * @param {String} token\n * @returns {String} Sanitised Token Name\n */\n const sanitiseCCode = (token: String): String => {\n    if (token.startsWith('0x'))\n        return token.padEnd(CURRENCY_CODE_BYTES, '\\0');\n    return encodeData(token.padEnd(CURRENCY_CODE_BYTES, '\\0'), 'currency_code');\n}\n\n\n export {\n    mintToken,\n    slashToken,\n    transferToken,\n    withdrawReserved,\n    sanitiseCCode\n};"]}