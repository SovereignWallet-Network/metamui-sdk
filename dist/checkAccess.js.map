{"version":3,"sources":["../src/checkAccess.ts"],"names":[],"mappings":"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","file":"checkAccess.js","sourcesContent":["import { ApiPromise } from '@polkadot/api';\nimport { buildConnection } from './connection';\nimport { sanitiseDid } from './did';\nimport { KeyringPair } from '@polkadot/keyring/types';\nimport { submitTransaction } from './common/helper';\nimport { utils } from '.';\nimport { SubmittableExtrinsic } from '@polkadot/api/types';\nimport { ISubmittableResult } from '@polkadot/types/types/extrinsic';\n\n/**\n * Add Allowed Extrinsics\n * @param {string} palletName\n * @param {string} functionName\n * @param {ApiPromise} senderAccountKeyPair\n * @param {ApiPromise} api\n * @returns {Promise<any>} Transaction object\n */\n async function addAllowedExtrinsic(palletName: string, functionName: string, senderAccountKeyPair: KeyringPair, api: ApiPromise): Promise<any> {\n  const provider = api || await buildConnection('local');\n  const tx = provider.tx.checkAccess.addAllowedExtrinsic(sanitiseInput(palletName), sanitiseInput(functionName));\n  const nonce = await provider.rpc.system.accountNextIndex(senderAccountKeyPair.address);\n  const signedTx = await tx.signAsync(senderAccountKeyPair, { nonce });\n  return submitTransaction(signedTx, provider);\n}\n\n/**\n * Remove Allowed Extrinsics\n * @param {string} palletName\n * @param {string} functionName\n * @param {ApiPromise} senderAccountKeyPair\n * @param {ApiPromise} api\n * @returns {Promise<any>} Transaction object\n */\n async function removeAllowedExtrinsic(palletName: string, functionName: string, senderAccountKeyPair: KeyringPair, api: ApiPromise): Promise<any> {\n  const provider = api || await buildConnection('local');\n  const tx = provider.tx.checkAccess.removeAllowedExtrinsic(sanitiseInput(palletName), sanitiseInput(functionName));\n  const nonce = await provider.rpc.system.accountNextIndex(senderAccountKeyPair.address);\n  const signedTx = await tx.signAsync(senderAccountKeyPair, { nonce });\n  return submitTransaction(signedTx, provider);\n}\n\n/**\n * Add Blacklisted Did\n * @param {string} did\n * @param {ApiPromise} senderAccountKeyPair\n * @param {ApiPromise} api\n * @param {number} reasonCode OPTIONAL\n * @returns {Promise<any>} Transaction object\n */\n async function addBlacklistedDid(did: string, senderAccountKeyPair: KeyringPair, api: ApiPromise, reasonCode?: number): Promise<any> {\n  const provider = api || await buildConnection('local');\n  let tx: SubmittableExtrinsic<\"promise\", ISubmittableResult>;\n  if(!reasonCode)\n    tx = provider.tx.checkAccess.addBlacklistedDid(sanitiseDid(did));\n  else\n    tx = provider.tx.checkAccess.addBlacklistedDid(sanitiseDid(did), reasonCode);\n  const nonce = await provider.rpc.system.accountNextIndex(senderAccountKeyPair.address);\n  const signedTx = await tx.signAsync(senderAccountKeyPair, { nonce });\n  return submitTransaction(signedTx, provider);\n}\n\n/**\n * Add Blacklisted Did\n * @param {string} did\n * @param {ApiPromise} senderAccountKeyPair\n * @param {ApiPromise} api\n * @returns {Promise<any>} Transaction object\n */\nasync function removeBlacklistedDid(did: string, senderAccountKeyPair: KeyringPair, api: ApiPromise): Promise<any> {\n  const provider = api || await buildConnection('local');\n  let tx = provider.tx.checkAccess.removeBlacklistedDid(sanitiseDid(did));\n  const nonce = await provider.rpc.system.accountNextIndex(senderAccountKeyPair.address);\n  const signedTx = await tx.signAsync(senderAccountKeyPair, { nonce });\n  return submitTransaction(signedTx, provider);\n}\n\n/**\n * Add Blacklisting Reason\n * @param {string} reasonName\n * @param {ApiPromise} senderAccountKeyPair\n * @param {ApiPromise} api\n * @returns {Promise<any>} Transaction object\n */\n async function addBlacklistingReason(reasonName: string, senderAccountKeyPair: KeyringPair, api: ApiPromise): Promise<any> {\n  const provider = api || await buildConnection('local');\n  let tx = provider.tx.checkAccess.addBlacklistingReason(sanitiseInput(reasonName));\n  const nonce = await provider.rpc.system.accountNextIndex(senderAccountKeyPair.address);\n  const signedTx = await tx.signAsync(senderAccountKeyPair, { nonce });\n  return submitTransaction(signedTx, provider);\n}\n\n/**\n * Remove Blacklisting Reason\n * @param {number} reasonCode\n * @param {ApiPromise} senderAccountKeyPair\n * @param {ApiPromise} api\n * @returns {Promise<any>} Transaction object\n */\n async function removeBlacklistingReason(reasonCode: number, senderAccountKeyPair: KeyringPair, api: ApiPromise): Promise<any> {\n  const provider = api || await buildConnection('local');\n  let tx = provider.tx.checkAccess.removeBlacklistingReason(reasonCode);\n  const nonce = await provider.rpc.system.accountNextIndex(senderAccountKeyPair.address);\n  const signedTx = await tx.signAsync(senderAccountKeyPair, { nonce });\n  return submitTransaction(signedTx, provider);\n}\n\n/**\n * Sanitise input\n * @param {string} input\n * @return {string} Hex data\n */\nconst sanitiseInput = (input: string) => {\n  if (input.startsWith('0x'))\n    return input.padEnd(32, '\\0');\n  return utils.encodeData(input.padEnd(32, '\\0'), 'Input32Bytes') as string;\n}\n\n/**\n * Get all blacklisted dids with reasons\n * @param {ApiPromise} api\n */\n async function getBlacklistedDids(api: ApiPromise): Promise<any> {\n  const provider = api || await buildConnection('local');\n  const blacklistedDids = await provider.query.checkAccess.blacklistedDids.entries();\n  if(!blacklistedDids) return null;\n  return blacklistedDids.map((did) => {\n    return {\n      did: did[0].toHuman(),\n      reason: did[1].toHuman()\n    }\n  });\n}\n\n/**\n * Get reason for blacklisted did\n * @param {string} did\n * @param {ApiPromise} api\n */\n async function getBlacklistingReasonOfDid(did: string, api: ApiPromise): Promise<any> {\n  const provider = api || await buildConnection('local');\n  const reason = await provider.query.checkAccess.blacklistedDids(sanitiseDid(did));\n  if(!reason) return null;\n  return reason.toJSON();\n}\n\n/**\n * Get blacklisting reson from reason code\n * @param {number} reasonCode\n * @param {ApiPromise} api\n * @returns Blacklisting reason\n */\n async function getBlacklistingReasonFromCode(reasonCode: number, api: ApiPromise): Promise<any> {\n  const provider = api || await buildConnection('local');\n  const reason = await provider.query.checkAccess.blacklistingReasons(reasonCode);\n  if(!reason) return null;\n  return reason.toJSON();\n}\n\n/**\n * Reverse lookup for blacklisting reason code\n * @param {string} reasonName\n * @param {ApiPromise} api\n * @returns Blacklisting reason code\n */\n async function getBlacklistingReasonCode(reasonName: string, api: ApiPromise): Promise<any> {\n  const provider = api || await buildConnection('local');\n  const reasonCode = await provider.query.checkAccess.blacklistingReasonsRLookup(sanitiseInput(reasonName));\n  if(!reasonCode) return null;\n  return reasonCode.toJSON();\n}\n\nexport {\n  addAllowedExtrinsic,\n  removeAllowedExtrinsic,\n  addBlacklistedDid,\n  removeBlacklistedDid,\n  addBlacklistingReason,\n  removeBlacklistingReason,\n  sanitiseInput,\n  getBlacklistedDids,\n  getBlacklistingReasonOfDid,\n  getBlacklistingReasonFromCode,\n  getBlacklistingReasonCode,\n};"]}