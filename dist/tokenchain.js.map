{"version":3,"sources":["../src/tokenchain.ts"],"names":[],"mappings":"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","file":"tokenchain.js","sourcesContent":["import { buildConnection } from './connection';\nimport { ApiPromise } from '@polkadot/api';\nimport { submitTransaction } from './common/helper';\nimport { KeyringPair } from '@polkadot/keyring/types';\nimport { hexToString } from './utils';\nimport { HexString } from '@polkadot/util/types';\nimport { utils } from '.';\nimport { sanitiseCCode } from './token';\nimport { getVCs } from './vc';\n\n/**\n * get Token List\n * @param {ApiPromise} api\n * @returns {Object} Token List\n */\n async function getTokenList(api: ApiPromise) {\n    const provider = api || (await buildConnection('local'));\n    const paraIds: any = (await provider.query.paras.parachains());\n    let tokenList = [];\n    for (let i = 0; i < paraIds.length; i++) {\n        let tokenInfo = String(await provider.query.tokenchain.rLookup(paraIds[i]));\n        tokenList.push({\n            id: paraIds[i].toString(),\n            name: hexToString(tokenInfo),\n        });\n    }\n    tokenList.push({ id: null, name: 'MUI' });\n    tokenList.sort((a, b) => a.name > b.name ? 1 : -1);\n    return tokenList;\n}\n\n/**\n * Lookup Tokenchain with Token Name to get ParaId\n * @param {HexString|String} tokenName\n * @param {ApiPromise} api\n * @returns {Number} Para Id\n */\n async function lookup(tokenName: HexString|String, api: ApiPromise) {\n    const provider = api || (await buildConnection('local'));\n    const paraId = (await provider.query.tokenchain.lookup(sanitiseCCode(tokenName))).toString();\n    return parseInt(paraId, 10);\n}\n\n/**\n * Reverse Lookup Tokenchain with ParaId to get Token Name\n * @param {Number} paraId\n * @param {ApiPromise} api\n * @returns {String} Token Name\n */\nasync function lookUpParaId(paraId: Number, api: ApiPromise): Promise<string> {\n    const provider = api || (await buildConnection('local'));\n    return utils.tidy(hexToString((await provider.query.tokenchain.rLookup(paraId)).toString())).toUpperCase();\n}\n\n\n/**\n * Get Token Issuer by currency code\n * @param {String} currencyCode\n * @param {ApiPromise} api\n * @returns {String} Token Isssuer Did\n */\n async function getTokenIssuer(currencyCode: String, api: ApiPromise): Promise<string> {\n    const provider = api || (await buildConnection('local'));\n    return (await provider.query.tokenchain.tokenIssuers(currencyCode)).toHex();\n}\n\n/**\n * Get Token Info by currency code\n * @param {String} currencyCode\n * @param {ApiPromise} api\n * @returns {Object} Token Details\n */\n async function getTokenInfo(currencyCode: String, api: ApiPromise): Promise<any> {\n    const provider = api || (await buildConnection('local'));\n    let tokenInfo: any = (await provider.query.tokenchain.tokenInfos(sanitiseCCode(currencyCode))).toJSON();\n    return {\n        tokenName: hexToString(tokenInfo.tokenName),\n        reservedBalance: tokenInfo.reservedBalance,\n        initialIssuance: tokenInfo.initialIssuance,\n        decimal: tokenInfo.decimal\n    };\n}\n\n/**\n * Add new parachain (requires sudo)\n * @param {HexString} vcId Currency Code HexString\n * @param {number} initialIssuance LOWEST FORM\n * @param {KeyringPair} senderAccountKeyPair\n * @param {ApiPromise} api\n */\nasync function initParachain(vcId: HexString, initialIssuance: number, senderAccountKeyPair:KeyringPair, api: ApiPromise) {\n    const provider = api || (await buildConnection('local'));\n    const vc_check = await getVCs(vcId, provider);\n    if(vc_check == null)\n        throw new Error('VC does not exist');\n    if(initialIssuance < 1 || initialIssuance == null)\n        throw new Error('Initial Issuance must be greater than 0');\n    const tx = provider.tx.tokenchain.initParachain(vcId, initialIssuance);\n    let nonce = await provider.rpc.system.accountNextIndex(senderAccountKeyPair.address);\n    let signedTx = await tx.signAsync(senderAccountKeyPair, { nonce });\n    return submitTransaction(signedTx, provider);\n}\n\n/**\n * Remove parachain (requires sudo)\n * @param {String} tokenName Currency Code HexString\n * @param {KeyringPair} senderAccountKeyPair\n * @param {ApiPromise} api\n */\n async function removeParachain(tokenName: String, senderAccountKeyPair:KeyringPair, api: ApiPromise) {\n    const provider = api || (await buildConnection('local'));\n    const tx = provider.tx.sudo.sudo(\n        provider.tx.tokenchain.removeParachain(sanitiseCCode(tokenName))\n    );\n    let nonce = await provider.rpc.system.accountNextIndex(senderAccountKeyPair.address);\n    let signedTx = await tx.signAsync(senderAccountKeyPair, { nonce });\n    return submitTransaction(signedTx, provider);\n}\n\nexport {\n    getTokenList,\n    lookup,\n    lookUpParaId,\n    initParachain,\n    removeParachain,\n    getTokenIssuer,\n    getTokenInfo,\n};\n"]}