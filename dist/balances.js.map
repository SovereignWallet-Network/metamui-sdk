{"version":3,"sources":["../src/balances.ts"],"names":[],"mappings":"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","file":"balances.js","sourcesContent":["import { ApiPromise } from '@polkadot/api';\nimport { buildConnection } from './connection';\nimport { resolveDIDToAccount, sanitiseDid } from './did';\nimport { KeyringPair } from '@polkadot/keyring/types';\nimport { submitTransaction } from './common/helper';\n\nclass Subscription {\n  private _api: ApiPromise;\n  private _did: string;\n  private _subscribed: boolean;\n  private _detailed: boolean;\n\n  constructor(api: ApiPromise, did: string, detailed: boolean = false) {\n    this._api = api;\n    this._did = did;\n    this._subscribed = false;\n    this._detailed = detailed;\n  }\n\n  private async subscribe(callback: (balance: number) => void) {\n    if (this._subscribed) {\n      return;\n    }\n    this._subscribed = true;\n    if(this._detailed) {\n      await this._api.query.token.account(sanitiseDid(this._did), (balance) => {\n        if (this._subscribed) {\n          console.log(this._did, balance.toJSON()?.['data']);\n          callback(balance.toJSON()?.['data']);\n        }\n      });\n    } else {\n      await this._api.query.token.account(sanitiseDid(this._did), (balance) => {\n        if (this._subscribed) {\n          console.log(this._did, balance.toJSON()?.['data'].free / 10 ** 6);\n          callback(balance.toJSON()?.['data'].free);\n        }\n      });\n    }\n  }\n\n  private unsubscribe() {\n    if (!this._subscribed) {\n      return;\n    }\n    this._subscribed = false;\n  }\n\n  public async start(callback: (balance: number) => void) {\n    console.log('Subscribing to balance', this._did);\n    await this.subscribe(callback);\n  }\n\n  public async stop() {\n    console.log('Unsubscribing to balance', this._did);\n    this.unsubscribe();\n  }\n\n}\n\n/** Get account balance(Highest Form) based on the did supplied.\n* @param {string} did valid registered did\n* @param {ApiPromise} api (optional)\n* @returns {Number}\n*/\nconst getBalance = async (did: string, api: ApiPromise): Promise<number> => {\n  // Resolve the did to get account ID\n  return new Promise(async (resolve, reject) => {\n    try {\n      const provider = api || await buildConnection('local');\n      const did_hex = sanitiseDid(did);\n      const token = await provider.rpc.system.properties();\n      const tokenData: any = token.toHuman();\n      let decimals = tokenData?.['tokenDecimals'][0];\n      // console.log('Decimals', decimals);\n      const accountInfo = await provider.query.token.account(did_hex);\n      const data = accountInfo.toJSON()?.['data'];\n      resolve(data.free / Math.pow(10, decimals));\n    } catch (err) {\n      // console.log(err);\n      return reject(new Error(\"Cannot get balance\"));\n    }\n  });\n};\n\n/** Get account balance(Lowest Form) based on the did supplied.\n * A valid registered did is required\n* @param {string} did valid registered did\n* @param {ApiPromise} api (optional)\n* @returns {Object}\n*/\nconst getDetailedBalance = async (did: string, api: ApiPromise): Promise<Object> => {\n  // Resolve the did to get account ID\n  return new Promise(async (resolve, reject) => {\n    try {\n      const provider = api || await buildConnection('local');\n      const did_hex = sanitiseDid(did);\n      const accountInfo = await provider.query.token.account(did_hex);\n      resolve( accountInfo.toJSON()?.['data'] );\n    } catch (err) {\n      // console.log(err);\n      return reject(new Error(\"Cannot get balance\"));\n    }\n  });\n};\n\n/** Listen to balance changes for a DID and execute the callback.\n* @param {string} did\n* @param {Function} callback\n* @param {ApiPromise} api\n*/\nconst subscribeToBalanceChanges = async (did: string, callback: (balance: number) => void, api: ApiPromise) => {\n  try {\n    const provider = api || await buildConnection('local');\n    const did_hex = sanitiseDid(did);\n    const token = await provider.rpc.system.properties();\n    const tokenData: any = token.toHuman();\n    let decimals = tokenData?.['tokenDecimals'][0];\n    return await provider.query.token.account(did_hex, ({ data: { free: currentBalance } }) => {\n      callback(currentBalance.toNumber() / Math.pow(10, decimals));\n    });\n  } catch (err) {\n    return null;\n  }\n};\n\n/**\n * Subsribe to detailed balance changes for a DID and execute the callback.\n * @param {string} did\n * @param {Function} callback\n * @param {ApiPromise} api\n */\nconst subscribeToDetailedBalanceChanges = async (did: string, callback: (data: Object) => void, api: ApiPromise) => {\n  try {\n    const provider = api || await buildConnection('local');\n    const did_hex = sanitiseDid(did);\n    return await provider.query.token.account(did_hex, ({ data }) => {\n      callback(data.toJSON());\n    });\n  } catch (err) {\n    return null;\n  }\n};\n\n/**\n * Get total units of tokens issued in the network.\n * @param {ApiPromise} api\n * @param {Boolean} decimal default value is false. Value is true for decimal form (Highest form) and false for lowest form\n */\nasync function getTotalSupply(api: ApiPromise, decimal?: Boolean): Promise<Number> {\n\n  const provider = api || (await buildConnection('local'));\n  let totalIssuance = Number(await provider.query.balances.totalIssuance());\n\n  if(decimal) {\n    const token = await provider.rpc.system.properties();\n    const tokenData: any = token.toHuman();\n    let decimals = tokenData?.['tokenDecimals'][0];\n    totalIssuance = totalIssuance / Math.pow(10, decimals);\n  }\n\n  return totalIssuance;\n}\n\n\n/**\n * The function will perform a metamui transfer operation from the account of senderAccount to the\n * receiverDID. The amount is in the lowest form.\n * @param {KeyPair} senderAccountKeyPair\n * @param {string} receiverDID\n * @param {Number} amount In Lowest Form\n * @param {ApiPromise} api (optional)\n * @param {int} nonce (optional)\n * @returns {Uint8Array}\n */\nasync function transfer(\n  senderAccountKeyPair: KeyringPair,\n  receiverDID: string,\n  amount: number,\n  api: ApiPromise,\n  nonce?: any,\n): Promise<string> {\n  const provider = api || (await buildConnection('local'));\n  // check if the recipent DID is valid\n  const receiverAccountID: any = await resolveDIDToAccount(receiverDID, provider);\n  // console.log(\"Receiver Account ID\", receiverAccountID);\n  if (!receiverAccountID) {\n    throw new Error('balances.RecipentDIDNotRegistered');\n  }\n\n  const tx = provider.tx.balances.transfer({ Id: receiverAccountID }, amount);\n  if(nonce === undefined){\n    nonce = await provider.rpc.system.accountNextIndex(senderAccountKeyPair.address);\n  }\n  const signedTx = await tx.signAsync(senderAccountKeyPair, { nonce });\n  return submitTransaction(signedTx, provider);\n}\n\n/**\n * This function is similar to sendTransaction except that it provides the user to add the memo to transfer functionality.\n * \n * @param {KeyPair} senderAccountKeyPair\n * @param {string} receiverDID\n * @param {Number} amount In Lowest Form\n * @param {string} memo\n * @param {ApiPromise} api\n * @param {int} nonce (optional)\n * @returns {Uint8Array}\n */\nasync function transferWithMemo(\n  senderAccountKeyPair: KeyringPair,\n  receiverDID: string,\n  amount: number,\n  memo: string,\n  api: ApiPromise,\n  nonce?: any,\n): Promise<string> {\n  const provider = api || (await buildConnection('local'));\n  // check if the recipent DID is valid\n  const receiverAccountID:any = await resolveDIDToAccount(receiverDID, provider);\n  // console.log(\"Receiver Account ID\", receiverAccountID);\n  if (!receiverAccountID) {\n    throw(new Error('balances.RecipentDIDNotRegistered'));\n  }\n  const tx = provider.tx.balances\n    .transferWithMemo({ id: receiverAccountID }, amount, memo);\n  if(nonce === undefined){\n    nonce = await provider.rpc.system.accountNextIndex(senderAccountKeyPair.address);\n  }\n  const signedTx = await tx.signAsync(senderAccountKeyPair, { nonce });\n  return submitTransaction(signedTx, provider);\n}\n\nexport {\n  getBalance,\n  getDetailedBalance,\n  subscribeToBalanceChanges,\n  subscribeToDetailedBalanceChanges,\n  getTotalSupply,\n  transfer,\n  transferWithMemo,\n  Subscription\n};\n"]}