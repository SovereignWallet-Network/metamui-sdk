{"version":3,"sources":["../src/utils.ts"],"names":[],"mappings":"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","file":"utils.js","sourcesContent":["import { u8aToHex, hexToU8a, hexToString as polkadotHextoString, stringToU8a, stringToHex } from '@polkadot/util';\nimport { base58Decode, blake2AsHex } from '@polkadot/util-crypto';\n\nimport * as types from '@polkadot/types';\n\nconst VCType = {\n  TokenVC: \"TokenVC\",\n  MintTokens: \"MintTokens\",\n  SlashTokens: \"SlashTokens\",\n  TokenTransferVC: \"TokenTransferVC\",\n  SlashMintTokens: \"SlashMintTokens\",\n  GenericVC: \"GenericVC\",\n  PublicDidVC: \"PublicDidVC\",\n  PrivateDidVC: \"PrivateDidVC\",\n};\nObject.freeze(VCType);\n\nconst METABLOCKCHAIN_TYPES = {\n  \"MaxMetadata\": \"ConstU32<32>\",\n  \"MaxRegNumLen\": \"ConstU32<32>\",\n  \"MaxCompNameLen\": \"ConstU32<32>\",\n  \"MaxKeyChanges\": \"ConstU32<1000>\",\n  \"PeerId\": \"OpaquePeerId\",\n  \"Did\": \"[u8;32]\",\n  \"PublicKey\": \"[u8;32]\",\n  \"DidMetadata\": \"BoundedVec<u8, MaxMetadata>\",\n  \"VCProp\": \"[u8;128]\",\n  \"PrevKeysMap\": \"BoundedVec<(AccountId, BlockNumber), MaxKeyChanges>\",\n\n  \"RegistrationNumber\": \"BoundedVec<u8, MaxMetadata>\",\n  \"CompanyName\": \"BoundedVec<u8, MaxCompNameLen>\",\n  \"PrivateDidVC\": {\n    \"public_key\": \"PublicKey\",\n    \"did\": \"Did\"\n  },\n  \"PublicDidVC\": {\n    \"public_key\": \"PublicKey\",\n    \"registration_number\": \"RegistrationNumber\",\n    \"company_name\": \"CompanyName\",\n    \"did\": \"Did\",\n  },\n  \"PrivateDid\": {\n    \"identifier\": \"Did\",\n    \"public_key\": \"PublicKey\",\n    \"metadata\": \"DidMetadata\"\n  },\n  \"PublicDid\": {\n    \"identifier\": \"Did\",\n    \"public_key\": \"PublicKey\",\n    \"metadata\": \"DidMetadata\",\n    \"registration_number\": \"RegistrationNumber\",\n    \"company_name\": \"CompanyName\"\n  },\n  \"DIdentity\": {\n    \"_enum\": {\n      \"Public\": \"PublicDid\",\n      \"Private\": \"PrivateDid\"\n    }\n  },\n  \"Address\": \"MultiAddress\",\n  \"LookupSource\": \"MultiAddress\",\n  \"Balance\": \"u128\",\n  \"TreasuryProposal\": {\n    \"proposer\": \"Did\",\n    \"beneficiary\": \"Did\",\n    \"value\": \"Balance\",\n    \"bond\": \"Balance\"\n  },\n  \"CurrencyId\": \"u32\",\n  \"Amount\": \"i64\",\n  \"Memo\": \"Vec<u8>\",\n  \"AccountInfo\": \"AccountInfoWithTripleRefCount\",\n  \"VC\": {\n    \"hash\": \"Hash\",\n    \"owner\": \"Did\",\n    \"issuers\": \"Vec<Did>\",\n    \"signatures\": \"Vec<Signature>\",\n    \"is_vc_used\": \"bool\",\n    \"is_vc_active\": \"bool\",\n    \"vc_type\": \"VCType\",\n    \"vc_property\": \"VCProp\"\n  },\n  \"VCType\": {\n    \"_enum\": [\n      \"TokenVC\",\n      \"SlashTokens\",\n      \"MintTokens\",\n      \"TokenTransferVC\",\n      \"GenericVC\",\n      \"PublicDidVC\",\n      \"PrivateDidVC\"\n    ]\n  },\n  \"TokenVC\": {\n    \"token_name\": \"[u8;16]\",\n    \"reservable_balance\": \"Balance\",\n    \"decimal\": \"u8\",\n    \"currency_code\": \"[u8;8]\"\n  },\n  \"SlashMintTokens\": {\n    \"vc_id\": \"VCid\",\n    \"currency_code\": \"CurrencyCode\",\n    \"amount\": \"u128\"\n  },\n  \"TokenTransferVC\": {\n    \"vc_id\": \"VCid\",\n    \"currency_code\": \"CurrencyCode\",\n    \"amount\": \"u128\"\n  },\n  \"GenericVC\": {\n    \"cid\": \"[u8;64]\"\n  },\n  \"VCHash\": \"Vec<u8>\",\n  \"VCStatus\": {\n    \"_enum\": [\n      \"Active\",\n      \"Inactive\"\n    ]\n  },\n  \"VCid\": \"[u8;32]\",\n  \"Hash\": \"H256\",\n  \"Signature\": \"H512\",\n  \"TokenDetails\": {\n    \"token_name\": \"Vec<u8>\",\n    \"currency_code\": \"Vec<u8>\",\n    \"decimal\": \"u8\",\n    \"block_number\": \"BlockNumber\"\n  },\n  \"TokenBalance\": \"u128\",\n  \"TokenAccountData\": {\n    \"free\": \"TokenBalance\",\n    \"reserved\": \"TokenBalance\",\n    \"frozen\": \"TokenBalance\"\n  },\n  \"TokenAccountInfo\": {\n    \"nonce\": \"u32\",\n    \"data\": \"TokenAccountData\"\n  },\n  \"Status\": {\n    \"_enum\": [\n      \"ToBeDeployed\",\n      \"Deployed\",\n      \"Removed\"\n    ]\n  },\n  \"Votes\": {\n    \"index\": \"ProposalIndex\",\n    \"threshold\": \"MemberCount\",\n    \"ayes\": \"Vec<Did>\",\n    \"nays\": \"Vec<Did>\",\n    \"end\": \"BlockNumber\"\n  },\n  \"CurrencyCode\": \"[u8;8]\",\n  \"StorageVersion\": {\n    \"_enum\": [\n      \"V1_0_0\",\n      \"V2_0_0\",\n      \"V3_0_0\"\n    ]\n  },\n  \"VCPalletVersion\": {\n    \"_enum\": [\n      \"V1_0_0\",\n      \"V2_0_0\"\n    ]\n  },\n  \"PalletName\": \"[u8;32]\",\n  \"FunctionName\": \"[u8;32]\",\n  \"BlacklistReason\": \"[u8;32]\",\n  \"ReasonCode\": \"u8\",\n  \"CurrentReasonCode\": \"u8\",\n  \"InitialExtrinsics\": {\n    \"pallet_name\": \"PalletName\",\n    \"function_name\": \"FunctionName\"\n  }\n}\n\n// Types for generating HEX\nconst ENCODE_TYPES = {\n  \"VC_HEX\": {\n    \"vc_type\": \"VCType\",\n    \"vc_property\": \"VCProp\",\n    \"owner\": \"Did\",\n    \"issuers\": \"Vec<Did>\"\n  },\n  \"decimal\": \"u8\",\n  \"currency_code\": \"[u8;8]\",\n  \"token_bytes\": \"[u8;16]\",\n  \"CID\": \"[u8;64]\",\n  \"Did\": \"[u8;32]\",\n  \"Input32Bytes\": \"[u8;32]\",\n  \"Input64Bytes\": \"[u8;64]\",\n};\n\nconst TOKEN_NAME_BYTES = 16;\nconst CURRENCY_CODE_BYTES = 8;\nconst VC_PROPERTY_BYTES = 128;\nconst CID_BYTES = 64;\nconst DID_BYTES = 32;\n\n/**\n * @param  {Bytes} inputBytes u8[]\n */\nconst bytesToHex = (inputBytes) => u8aToHex(inputBytes);\n/**\n * @param  {string} inputString\n */\nconst hexToBytes = (inputString) => hexToU8a(inputString);\n/**\n * @param  {Base58} bs58string\n */\nconst base58ToBytes = (bs58string) => base58Decode(bs58string);\n/**\n * @param  {String} inputString\n */\nconst stringToBytes = (inputString) => stringToU8a(inputString);\n/**\n * @param  {Hex} hexString\n */\nconst hexToString = (hexString) => polkadotHextoString(hexString).replace(/^\\0+/, '').replace(/\\0+$/, '');\n\n\n/**\n * @param {Hex} hexString\n */\nconst vcHexToVcId = (hexString) => blake2AsHex(hexString);\n\nconst registry = new types.TypeRegistry();\nregistry.register(METABLOCKCHAIN_TYPES);\nregistry.register(ENCODE_TYPES);\n\n/** Encodes object/ string of given type to hex\n * @param  {Object | string} data Object to be encoded\n * @param  {string} typeKey Key from METABLOCKCHAIN_TYPES which represents type of data\n * @returns {string} Encoded Hex\n */\nfunction encodeData(data, typeKey) {\n  return types.createType(registry, typeKey, data).toHex();\n}\n\n/** Decodes hex of given type to it's corresponding object/value\n * @param  {string} hexValue Hex String to be decoded\n * @param  {string} typeKey Key from METABLOCKCHAIN_TYPES which represents type of data\n * @returns {Object | string} Decoded Object/String\n */\nfunction decodeHex(hexValue, typeKey) {\n  return types.createType(registry, typeKey, hexValue).toJSON();\n}\n\n/** Checks if str is upper and only contains characters\n * @param  {} str\n * @returns bool\n */\nfunction isUpperAndValid(str) {\n  return /^[A-Z]+$/.test(str);\n}\n\n/** regex to remove unwanted hex bytes\n * @param  {string} s Hex String to make tidy\n * @returns {Object | string} Decoded tidy Object/String\n */\nfunction tidy(s) {\n  const tidy = typeof s === 'string'\n    ? s.replace(/[\\x00-\\x1F\\x7F-\\xA0]+/g, '')\n    : s;\n  return tidy;\n}\n\n/** Sort object by keys\n * @param  {Object} unorderedObj unordered object\n * @returns {Object} ordered object by key\n */\nfunction sortObjectByKeys(unorderedObj) {\n  return Object.keys(unorderedObj).sort().reduce(\n    (obj, key) => {\n      obj[key] = unorderedObj[key];\n      return obj;\n    },\n    {}\n  );\n}\n\n/** generate blake hash of js object\n * @param  {Object} unordered unordered object\n * @returns {Object} ordered object by key\n */\nfunction generateObjectHash(object) {\n  const sortedData = sortObjectByKeys(object);\n  const encodedData = stringToHex(JSON.stringify(sortedData));\n  return blake2AsHex(encodedData);\n}\n\nexport {\n  METABLOCKCHAIN_TYPES,\n  TOKEN_NAME_BYTES,\n  CURRENCY_CODE_BYTES,\n  VC_PROPERTY_BYTES,\n  CID_BYTES,\n  DID_BYTES,\n  VCType,\n  bytesToHex,\n  hexToBytes,\n  base58ToBytes,\n  hexToString,\n  stringToBytes,\n  encodeData,\n  decodeHex,\n  vcHexToVcId,\n  isUpperAndValid,\n  sortObjectByKeys,\n  generateObjectHash,\n  tidy\n};"]}