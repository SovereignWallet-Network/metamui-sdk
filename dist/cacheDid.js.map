{"version":3,"sources":["../src/cacheDid.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,yCAA6C;AAC7C,6CAA+C;AAC/C,+BAAoC;AAEpC;;;;;GAKG;AACH,SAAe,UAAU,CAAC,GAAW,EAAE,GAAe;;QAClD,MAAM,QAAQ,GAAG,GAAG,IAAI,CAAC,MAAM,IAAA,4BAAe,EAAC,OAAO,CAAC,CAAC,CAAC;QACzD,OAAO,CAAC,MAAM,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAA,iBAAW,EAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;IACnF,CAAC;CAAA;AAoCG,gCAAU;AAlCd;;;;;GAKG;AACH,SAAe,YAAY,CAAC,GAAW,EAAE,GAAe;;QACpD,MAAM,QAAQ,GAAG,GAAG,IAAI,CAAC,MAAM,IAAA,4BAAe,EAAC,OAAO,CAAC,CAAC,CAAC;QACzD,OAAO,CAAC,MAAM,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAA,iBAAW,EAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;IACrF,CAAC;CAAA;AA0BG,oCAAY;AAxBhB;;;;;GAKG;AACH,SAAe,MAAM,CAAC,GAAW,EAAE,GAAe;;QAC9C,MAAM,QAAQ,GAAG,GAAG,IAAI,CAAC,MAAM,IAAA,4BAAe,EAAC,OAAO,CAAC,CAAC,CAAC;QACzD,OAAO,CAAC,MAAM,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAA,iBAAW,EAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;IAC/E,CAAC;CAAA;AAgBG,wBAAM;AAdV;;;;;GAKG;AACH,SAAe,aAAa,CAAC,SAAiB,EAAE,GAAe;;QAC3D,MAAM,QAAQ,GAAG,GAAG,IAAI,CAAC,MAAM,IAAA,4BAAe,EAAC,OAAO,CAAC,CAAC,CAAC;QACzD,OAAO,IAAA,kBAAW,EAAE,CAAC,MAAM,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;IACvF,CAAC;CAAA;AAMG,sCAAa","file":"cacheDid.js","sourcesContent":["import { ApiPromise } from '@polkadot/api';\nimport { hexToString } from '@polkadot/util';\nimport { buildConnection } from './connection';\nimport { sanitiseDid } from './did';\n\n/**\n * Get Did Type from Mapping\n * @param {String} did\n * @param {ApiPromise} api\n * @returns {String} Did Type\n */\nasync function getDidType(did: String, api: ApiPromise): Promise<string> {\n    const provider = api || (await buildConnection('local'));\n    return (await provider.query.cacheDid.didTypeMap(sanitiseDid(did))).toString();\n}\n\n/**\n * Get mapped public key from Did\n * @param {String} did\n * @param {ApiPromise} api\n * @returns {String} Public Key Hex\n */\nasync function getPublicKey(did: String, api: ApiPromise): Promise<string> {\n    const provider = api || (await buildConnection('local'));\n    return (await provider.query.cacheDid.publicKeyMap(sanitiseDid(did))).toString();\n}\n\n/**\n * Lookup Cached Did\n * @param {String} did\n * @param {ApiPromise} api\n * @returns {String} AccountId\n */\nasync function lookup(did: String, api: ApiPromise): Promise<string> {\n    const provider = api || (await buildConnection('local'));\n    return (await provider.query.cacheDid.lookup(sanitiseDid(did))).toString();\n}\n\n/**\n * Reverse Lookup Cached Did\n * @param {String} accountId\n * @param {ApiPromise} api\n * @returns {String} Did\n */\nasync function reverseLookup(accountId: String, api: ApiPromise): Promise<string> {\n    const provider = api || (await buildConnection('local'));\n    return hexToString( (await provider.query.cacheDid.rLookup(accountId)).toString());\n}\n\nexport {\n    getDidType,\n    getPublicKey,\n    lookup,\n    reverseLookup,\n}"]}