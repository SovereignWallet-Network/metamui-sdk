{"version":3,"sources":["../src/kycUtils.ts"],"names":[],"mappings":"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","file":"kycUtils.js","sourcesContent":["import { u8aToHex, hexToU8a, stringToHex } from \"@polkadot/util\";\nimport { signatureVerify } from \"@polkadot/util-crypto\";\nimport { sha256 } from \"js-sha256\";\nimport { getDIDDetails, getDidKeyHistory, isDidValidator } from \"./did\";\n\n/**\n * \n * @param propertiesJson \n * @returns {Object} Create Unsigned VC \n */\nasync function createVC(propertiesJson) {\n    return {\n        properties: propertiesJson,\n        hash: stringToHex(sha256(JSON.stringify(propertiesJson))),\n        verifier: undefined,\n        signature: undefined,\n    };\n}\n\n/**\n * @param {JSON} vcJson\n * @param {string} verifierDid\n * @param {string} signingKeyPair\n * @returns {Object} Signed VC\n */\nasync function signVC(vcJson, verifierDid, signingKeyPair) {\n    const expectedHash = stringToHex(sha256(JSON.stringify(vcJson.properties)));\n    if (expectedHash !== vcJson.hash) {\n        throw new Error(\"Data mismatch\");\n    }\n\n    const dataToSign = hexToU8a(vcJson.hash);\n    const signedData = signingKeyPair.sign(dataToSign);\n    const resVC = vcJson;\n    resVC.verifier = verifierDid;\n    resVC.signature = u8aToHex(signedData);\n    return resVC;\n}\n\n/**\n * \n * @param vcJson \n * @param api \n * @returns {boolean} true or false\n */\nasync function verifyVC(vcJson, api) {\n    const provider = api;\n    if(!vcJson.verifier || !vcJson.signature) {\n        throw new Error(\"VC Not signed!\");\n    }\n\n    const expectedHash = stringToHex(sha256(JSON.stringify(vcJson.properties)));\n    if (expectedHash !== vcJson.hash) {\n        throw new Error(\"Data mismatch\");\n    }\n\n    const isSignerValidator = await isDidValidator(vcJson.verifier, provider);\n    if (!isSignerValidator) {\n        throw new Error(\"VC Not signed by a validator!\");\n    }\n\n    const didDetails: any = await getDIDDetails(vcJson.verifier, provider);\n    let signerAddress = didDetails.public_key;\n\n    if(didDetails.added_block > parseInt(vcJson.properties.issued_block, 10)) {\n        console.log('Signing key has been rotated, searching for previous key history');\n        const prevKeyDetails:any = await getDidKeyHistory(vcJson.verifier, provider);\n        prevKeyDetails.forEach(([accountId, blockNo]) => {\n            if(parseInt(vcJson.properties.issued_block, 10) > blockNo) {\n                console.log('Signing Key Found!');\n                signerAddress = accountId;\n            }\n        });\n    }\n\n    return signatureVerify(hexToU8a(vcJson.hash), hexToU8a(vcJson.signature), signerAddress.toString()).isValid;\n}\n\n/**\n * @param propertiesJson \n * @returns {Object} Create Unsigned VC\n */\nasync function createSsidVC(propertiesJson) {\n    return {\n        properties: propertiesJson,\n        hash: stringToHex(sha256(JSON.stringify(propertiesJson))),\n        signature: undefined,\n    };\n}\n\n/**\n * @param vcJson \n * @param signingKeyPair \n * @returns {Object} Signed VC\n */\nasync function signSsidVC(vcJson, signingKeyPair) {\n    const dataToSign = hexToU8a(vcJson.hash);\n    const signedData = signingKeyPair.sign(dataToSign);\n    const resVC = vcJson;\n    resVC.signature = u8aToHex(signedData);\n    return resVC;\n}\n\n/**\n * @param vcJson \n * @returns {boolean} true or false\n */\nasync function verifySsidVC(vcJson) {\n    return signatureVerify(\n        hexToU8a(vcJson.hash),\n        hexToU8a(vcJson.signature),\n        vcJson.properties.public_key.toString()\n    ).isValid;\n}\n\nexport { \n    createVC, \n    signVC,\n    verifyVC,\n    createSsidVC,\n    signSsidVC,\n    verifySsidVC\n};"]}