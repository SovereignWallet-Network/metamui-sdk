{"version":3,"sources":["../src/did.ts"],"names":[],"mappings":"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","file":"did.js","sourcesContent":["import { ApiPromise } from '@polkadot/api';\nimport { AnyJson } from '@polkadot/types/types';\nimport { mnemonicGenerate } from '@polkadot/util-crypto';\nimport { buildConnection } from './connection';\nimport { KeyringPair } from '@polkadot/keyring/types';\nimport { did, tokenchain, utils } from '.';\nimport { submitTransaction } from './common/helper';\n\n/** Generate Mnemonic\n * @returns {string} Mnemonic\n */\nconst generateMnemonic = () => mnemonicGenerate();\n\nconst checkIdentifierFormat = (identifier) => {\n  const format = /^[0-9a-zA-Z]+$/;\n\n  return format.test(identifier);\n};\n\n/**\n * Store the generated DID VC\n * @param {HexString} vcId\n * @param {number|string|null} syncTo - is null for relay chain. Pass valid paraId \n * @param {KeyringPair} signingKeypair\n * @param {ApiPromise} api\n * @returns {Object} Transaction Object\n */\n\nasync function createPrivate(vcId, syncTo = null, signingKeypair: KeyringPair, api: ApiPromise) {\n  const provider = api || (await buildConnection('local')) as ApiPromise;\n  const tx = provider.tx.did.createPrivate(vcId, await sanitiseSyncTo(syncTo, provider));\n  const nonce = await provider.rpc.system.accountNextIndex(signingKeypair.address);\n  const signedTx = await tx.signAsync(signingKeypair, { nonce });\n  return submitTransaction(signedTx, provider);\n}\n\n/**\n * Create Private DID and store the generated DID object in blockchain\n * @param {HexString} vcId\n * @param {number|string} syncTo - is null for relay chain\n * @param {KeyringPair} signingKeypair\n * @param {ApiPromise} api\n * @returns {Object} Transaction Object\n */\n\nasync function createPublic(vcId, syncTo = null, signingKeypair: KeyringPair, api: ApiPromise) {\n  const provider = api || (await buildConnection('local')) as ApiPromise;\n  const tx = provider.tx.did.createPublic(vcId, await sanitiseSyncTo(syncTo, provider));\n  const nonce = await provider.rpc.system.accountNextIndex(signingKeypair.address);\n  const signedTx = await tx.signAsync(signingKeypair, { nonce });\n  return submitTransaction(signedTx, provider);\n}\n\n\n/**\n * Get did information from accountID\n * @param {string} identifier DID Identifier\n * @param {ApiPromise} api\n * @returns {JSON} DID Information\n */\nasync function getDIDDetails(identifier: string, api: ApiPromise): Promise<AnyJson> {\n  try {\n    const provider = api;\n    if (!provider) {\n      throw new Error('Not connected to blockchain');\n    }\n    const did_hex = sanitiseDid(identifier);\n    const data = (await provider.query.did.diDs(did_hex)).toJSON();\n    if (data == null) {\n      console.log('DID not found');\n      return null;\n    }\n    \n    if (data?.[0]?.private?.identifier) {\n      return {\n        identifier: data[0].private.identifier,\n        public_key: data[0].private.publicKey,\n        metadata: data[0].private.metadata,\n        added_block: data[1],\n      };\n    } else {\n      return {\n        identifier: data[0].public.identifier,\n        public_key: data[0].public.publicKey,\n        metadata: data[0].public.metadata,\n        registration_number: data[0].public.registrationNumber,\n        company_name: data[0].public.companyName,\n        added_block: data[1],\n      };\n    }\n  } catch (error) {\n    throw Error('Failed to fetch details: ' + error);\n  }\n}\n\n/**\n * Get the accountId for a given DID\n * @param {string} identifier\n * @param {ApiPromise} api\n * @param {Number} blockNumber (optional)\n * @returns {JSON}\n */\n\nasync function resolveDIDToAccount(identifier: string, api: ApiPromise, blockNumber?: number) {\n  const provider = api || (await buildConnection('local'));\n  const did_hex = sanitiseDid(identifier);\n  if (!blockNumber && blockNumber !== 0) {\n    return (await provider.query.did.lookup(did_hex)).toJSON();\n  }\n  const didDetails: AnyJson = await getDIDDetails(identifier, provider);\n  if (didDetails == null) return null;\n  if (typeof didDetails?.['added_block'] === 'number') {\n    if (blockNumber >= didDetails?.['added_block']) {\n      return (await provider.query.did.lookup(did_hex)).toJSON();\n    }\n  }\n  const keyHistories = await getDidKeyHistory(identifier, provider);\n  if (!keyHistories) {\n    return null;\n  }\n  if (!Array.isArray(keyHistories)) return null\n\n  const keyIndex = keyHistories.reverse().findIndex((value: AnyJson) => blockNumber >= parseInt(value?.[1]));\n  if (keyIndex < 0) {\n    return null;\n  }\n  return keyHistories[keyIndex]?.[0];\n}\n\n/**\n * Get the DID associated to given accountID\n * @param {string} accountId (hex/base64 version works)\n * @param {ApiPromise} api\n * @returns {JSON}\n */\nasync function resolveAccountIdToDid(accountId, api: ApiPromise): Promise<string | Boolean> {\n  const provider = api || (await buildConnection('local'));\n  const data = (await provider.query.did.rLookup(accountId)).toJSON();\n  if (data === '0x0000000000000000000000000000000000000000000000000000000000000000') {\n    return false;\n  }\n\n  return (typeof data === 'string') ? data : false;\n}\n\n/**\n * This function will rotate the keys assiged to a DID\n * It should only be called by validator accounts, else will fail\n * @param {string} identifier\n * @param {Uint8Array} newKey\n * @param {string|number} syncTo\n * @param {KeyringPair} signingKeypair // of a validator account\n * @param {ApiPromise} api\n * @returns {Object} Transaction Object\n */\nasync function updateDidKey(identifier, newKey, syncTo = null, signingKeypair: KeyringPair, api: ApiPromise) {\n  const provider = api || (await buildConnection('local'));\n  const did_hex = sanitiseDid(identifier);\n  const data = await did.resolveDIDToAccount(did_hex, provider);\n  if(data == null) {\n    throw(new Error('did.DIDDoesNotExist'));\n  }\n\n  const data2 = await did.resolveAccountIdToDid(newKey, provider);\n  if(data2 != false) {\n    throw(new Error('did.PublicKeyRegistered'));\n  }\n  // call the rotateKey extrinsinc\n  const tx = provider.tx.validatorCommittee.execute(provider.tx.did.rotateKey(did_hex, newKey, await sanitiseSyncTo(syncTo, provider)), 1000);\n  let nonce = await provider.rpc.system.accountNextIndex(signingKeypair.address);\n  let signedTx = await tx.signAsync(signingKeypair, { nonce });\n  return submitTransaction(signedTx, provider);\n}\n\n/**\n * Convert to hex but return fixed size always, mimics substrate storage\n * @param {string} data\n * @param {number} size\n * @return {string}\n */\nfunction convertFixedSizeHex(data: string, size = 64) {\n  if (data.length > size) throw new Error('Invalid Data');\n  return utils.encodeData(data.padEnd(utils.DID_BYTES, '\\0'), 'Did');\n}\n\n/**\n * Checks if the given did is in hex format or not & converts it into valid hex format.\n * \n *  Note: This util function is needed since dependant module wont convert the utf did to hex anymore\n * \n * @param {string} did\n * @return {string} Hex did\n */\nconst sanitiseDid = (did) => {\n  if (did.startsWith('0x'))\n    return did.padEnd(utils.DID_BYTES, '\\0');\n  return utils.encodeData(did.padEnd(utils.DID_BYTES, '\\0'), 'Did');\n}\n\n/**\n * Sanitize paraId before creating a did\n * @param {string|number|null} syncTo\n * @param {ApiPromise} api\n * @returns {number|null}\n */\nconst sanitiseSyncTo = async (syncTo, api: ApiPromise) => {\n  const provider = api || await buildConnection('local');\n  if(!syncTo || syncTo === null) {\n    return null;\n  } else {\n    if(parseInt(syncTo) > 0) {\n      let data = await tokenchain.lookUpParaId(syncTo, provider);\n      if(data)\n        return parseInt(syncTo);\n\n      throw new Error('Invalid paraId : syncTo');\n    \n    } else if(typeof syncTo === 'string') {\n      let paraId = await tokenchain.lookup(syncTo, provider) || null;\n      if(paraId)\n        return paraId;\n      throw new Error('Invalid Currency Code : syncTo');\n    }\n  }\n  throw new Error('Invalid syncTo');\n}\n\n/**\n * Check if the user is an approved validator\n * @param {string} identifier\n * @param {ApiPromise} api\n * @returns {Boolean}\n */\nasync function isDidValidator(identifier: string, api: ApiPromise): Promise<boolean> {\n  const provider = api || (await buildConnection('local'));\n  const did_hex = sanitiseDid(identifier);\n  const vList = (await provider.query.validatorSet.members()).toJSON();\n  if (vList && Array.isArray(vList)) {\n    return vList.includes(did_hex);\n  }\n  return false\n}\n\n/**\n * Fetch the history of rotated keys for the specified DID\n * @param {string} identifier\n * @param {ApiPromise} api\n * @returns {JSON}\n */\nasync function getDidKeyHistory(identifier: string, api: ApiPromise) {\n  const provider = api || (await buildConnection('local'));\n  const did_hex = sanitiseDid(identifier);\n  return (await provider.query.did.prevKeys(did_hex)).toJSON();\n}\n\n/**\n *\n * @param {string} identifier\n * @param {string} metadata\n * @param {Keyringpair} signingKeypair of a validator account\n * @param {ApiPromise} api\n * @returns {Object} Transaction Object\n */\nasync function updateMetadata(identifier, metadata, signingKeypair, api: ApiPromise) {\n  const provider = api || (await buildConnection('local'));\n  const did_hex = sanitiseDid(identifier);\n  const tx = provider.tx.validatorCommittee.execute(provider.tx.did.updateMetadata(did_hex, metadata), 1000);\n  let nonce = await provider.rpc.system.accountNextIndex(signingKeypair.address);\n  let signedTx = await tx.signAsync(signingKeypair, { nonce });\n  return submitTransaction(signedTx, provider);\n}\n\n/**\n * Sync DID VC with other chains\n * @param {string} identifier\n * @param syncTo - is null for relay chain\n * @param {KeyringPair} signingKeypair of a validator account\n * @param {ApiPromise} api\n * @returns {Object} Transaction Object\n */\nasync function syncDid(identifier, syncTo = null, signingKeypair, api: ApiPromise) {\n  const provider = api || (await buildConnection('local'));\n  const did_hex = sanitiseDid(identifier);\n  const tx = provider.tx.validatorCommittee.execute(provider.tx.did.syncDid(did_hex, await sanitiseSyncTo(syncTo, provider)), 1000);\n  let nonce = await provider.rpc.system.accountNextIndex(signingKeypair.address);\n  let signedTx = await tx.signAsync(signingKeypair, { nonce });\n  return submitTransaction(signedTx, provider);\n}\n\n/**\n * Remove DID VC\n * @param {string} identifier\n * @param syncTo - is null for relay chain\n * @param {KeyringPair} signingKeypair of a SUDO account\n * @param {ApiPromise} api\n * @returns {Object} Transaction Object\n */\nasync function removeDid(identifier, syncTo = null, signingKeypair, api: ApiPromise) {\n  const provider = api || (await buildConnection('local'));\n  const did_hex = sanitiseDid(identifier);\n  const tx = provider.tx.sudo.sudo(provider.tx.did.remove(did_hex, await sanitiseSyncTo(syncTo, provider)));\n  let nonce = await provider.rpc.system.accountNextIndex(signingKeypair.address);\n  let signedTx = await tx.signAsync(signingKeypair, { nonce });\n  return submitTransaction(signedTx, provider);\n}\n\nexport {\n  convertFixedSizeHex,\n  generateMnemonic,\n  createPrivate,\n  createPublic,\n  getDIDDetails,\n  updateDidKey,\n  resolveDIDToAccount,\n  getDidKeyHistory,\n  resolveAccountIdToDid,\n  isDidValidator,\n  updateMetadata,\n  sanitiseDid,\n  sanitiseSyncTo,\n  syncDid,\n  removeDid\n};\n"]}